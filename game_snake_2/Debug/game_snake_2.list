
game_snake_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005108  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005660  08005660  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005668  08005668  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000074  080056e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  080056e4  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1f7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002050  00000000  00000000  0002c29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021848  00000000  00000000  0002eb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a9a1  00000000  00000000  000503d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c38b5  00000000  00000000  0005ad79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0011e62e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000007a0  00000000  00000000  0011e688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b6c  00000000  00000000  0011ee28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005280 	.word	0x08005280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005280 	.word	0x08005280

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2uiz>:
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	d211      	bcs.n	8000620 <__aeabi_d2uiz+0x28>
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d211      	bcs.n	8000626 <__aeabi_d2uiz+0x2e>
 8000602:	d50d      	bpl.n	8000620 <__aeabi_d2uiz+0x28>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d40e      	bmi.n	800062c <__aeabi_d2uiz+0x34>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	fa23 f002 	lsr.w	r0, r3, r2
 800061e:	4770      	bx	lr
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	4770      	bx	lr
 8000626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800062a:	d102      	bne.n	8000632 <__aeabi_d2uiz+0x3a>
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <HAL_SPI_TxCpltCallback>:

uint8_t FrameBuffer[N5110_PIXEL];
static const uint8_t *CurrentFont = SmallFont;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi->Instance == SPI2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_SPI_TxCpltCallback+0x30>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d10a      	bne.n	8000958 <HAL_SPI_TxCpltCallback+0x28>
  {
    SPI_Deselect();
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000948:	4806      	ldr	r0, [pc, #24]	; (8000964 <HAL_SPI_TxCpltCallback+0x34>)
 800094a:	f002 fc51 	bl	80031f0 <HAL_GPIO_WritePin>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800094e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <HAL_SPI_TxCpltCallback+0x34>)
 8000954:	f002 fc65 	bl	8003222 <HAL_GPIO_TogglePin>
  }
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40003800 	.word	0x40003800
 8000964:	40020c00 	.word	0x40020c00

08000968 <N5110_Write>:


static bool N5110_Write(uint8_t data, uint8_t mode)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	460a      	mov	r2, r1
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
  SPI_Select();
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097e:	4815      	ldr	r0, [pc, #84]	; (80009d4 <N5110_Write+0x6c>)
 8000980:	f002 fc36 	bl	80031f0 <HAL_GPIO_WritePin>

  if(mode == N5110_CMD)
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d106      	bne.n	8000998 <N5110_Write+0x30>
  {
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000990:	4810      	ldr	r0, [pc, #64]	; (80009d4 <N5110_Write+0x6c>)
 8000992:	f002 fc2d 	bl	80031f0 <HAL_GPIO_WritePin>
 8000996:	e011      	b.n	80009bc <N5110_Write+0x54>
  }
  else if(mode == N5110_DATA)
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d106      	bne.n	80009ac <N5110_Write+0x44>
  {
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <N5110_Write+0x6c>)
 80009a6:	f002 fc23 	bl	80031f0 <HAL_GPIO_WritePin>
 80009aa:	e007      	b.n	80009bc <N5110_Write+0x54>
  }
  else
  {
    SPI_Deselect();
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b2:	4808      	ldr	r0, [pc, #32]	; (80009d4 <N5110_Write+0x6c>)
 80009b4:	f002 fc1c 	bl	80031f0 <HAL_GPIO_WritePin>
    return false;
 80009b8:	2300      	movs	r3, #0
 80009ba:	e006      	b.n	80009ca <N5110_Write+0x62>
  }

  HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <N5110_Write+0x70>)
 80009c4:	f003 f8fe 	bl	8003bc4 <HAL_SPI_Transmit_DMA>
  //HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
  //SPI_Deselect();

  return true;
 80009c8:	2301      	movs	r3, #1
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	200002a8 	.word	0x200002a8

080009dc <N5110_BufferWrite>:

static bool N5110_BufferWrite(uint8_t *data, uint16_t len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
  SPI_Select();
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	480a      	ldr	r0, [pc, #40]	; (8000a18 <N5110_BufferWrite+0x3c>)
 80009f0:	f002 fbfe 	bl	80031f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <N5110_BufferWrite+0x3c>)
 80009fc:	f002 fbf8 	bl	80031f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_DMA(&hspi2, data, len);
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	461a      	mov	r2, r3
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <N5110_BufferWrite+0x40>)
 8000a08:	f003 f8dc 	bl	8003bc4 <HAL_SPI_Transmit_DMA>
  //HAL_SPI_Transmit(&hspi2, data, len, HAL_MAX_DELAY);
  //SPI_Deselect();

  return true;
 8000a0c:	2301      	movs	r3, #1
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	200002a8 	.word	0x200002a8

08000a20 <N5110_Init>:

bool N5110_Init()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  N5110_Reset();
 8000a24:	f000 f84c 	bl	8000ac0 <N5110_Reset>
  if(!N5110_Write(PCD8544_CMD_FUNCTIONSET | PCD8544_BIT_EXTENDED, N5110_CMD)) return false;
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2021      	movs	r0, #33	; 0x21
 8000a2c:	f7ff ff9c 	bl	8000968 <N5110_Write>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f083 0301 	eor.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <N5110_Init+0x20>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e03c      	b.n	8000aba <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_SETVOP | PCD8544_DEFAULT_CONTRAST, N5110_CMD)) return false;
 8000a40:	2100      	movs	r1, #0
 8000a42:	20c0      	movs	r0, #192	; 0xc0
 8000a44:	f7ff ff90 	bl	8000968 <N5110_Write>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f083 0301 	eor.w	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <N5110_Init+0x38>
 8000a54:	2300      	movs	r3, #0
 8000a56:	e030      	b.n	8000aba <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_SETTEMP | PCD8544_DEFAULT_TEMP, N5110_CMD)) return false;
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f7ff ff84 	bl	8000968 <N5110_Write>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f083 0301 	eor.w	r3, r3, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <N5110_Init+0x50>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e024      	b.n	8000aba <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_SETBIAS | PCD8544_DEFAULT_BIAS, N5110_CMD)) return false;
 8000a70:	2100      	movs	r1, #0
 8000a72:	2013      	movs	r0, #19
 8000a74:	f7ff ff78 	bl	8000968 <N5110_Write>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	f083 0301 	eor.w	r3, r3, #1
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <N5110_Init+0x68>
 8000a84:	2300      	movs	r3, #0
 8000a86:	e018      	b.n	8000aba <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_FUNCTIONSET, N5110_CMD)) return false;
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2020      	movs	r0, #32
 8000a8c:	f7ff ff6c 	bl	8000968 <N5110_Write>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f083 0301 	eor.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <N5110_Init+0x80>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e00c      	b.n	8000aba <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_DISPLAYCONTROL | PCD8544_BIT_DISPLAYNORMAL, N5110_CMD)) return false;
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	200c      	movs	r0, #12
 8000aa4:	f7ff ff60 	bl	8000968 <N5110_Write>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <N5110_Init+0x98>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e000      	b.n	8000aba <N5110_Init+0x9a>

  return true;
 8000ab8:	2301      	movs	r3, #1
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <N5110_Reset>:

void N5110_Reset()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <N5110_Reset+0x28>)
 8000acc:	f002 fb90 	bl	80031f0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ad0:	2064      	movs	r0, #100	; 0x64
 8000ad2:	f001 fd11 	bl	80024f8 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <N5110_Reset+0x28>)
 8000ade:	f002 fb87 	bl	80031f0 <HAL_GPIO_WritePin>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <N5110_Update>:

  return true;
}

bool N5110_Update()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Move to (0,0) position */
  if(!N5110_Write(PCD8544_CMD_SETXADDR, N5110_CMD)) return false;
 8000af0:	2100      	movs	r1, #0
 8000af2:	2080      	movs	r0, #128	; 0x80
 8000af4:	f7ff ff38 	bl	8000968 <N5110_Write>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f083 0301 	eor.w	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <N5110_Update+0x1c>
 8000b04:	2300      	movs	r3, #0
 8000b06:	e01c      	b.n	8000b42 <N5110_Update+0x56>
  if(!N5110_Write(PCD8544_CMD_SETYADDR, N5110_CMD)) return false;
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2040      	movs	r0, #64	; 0x40
 8000b0c:	f7ff ff2c 	bl	8000968 <N5110_Write>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f083 0301 	eor.w	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <N5110_Update+0x34>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e010      	b.n	8000b42 <N5110_Update+0x56>

  if(!N5110_BufferWrite(FrameBuffer, N5110_PIXEL)) return false;
 8000b20:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <N5110_Update+0x5c>)
 8000b26:	f7ff ff59 	bl	80009dc <N5110_BufferWrite>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f083 0301 	eor.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <N5110_Update+0x4e>
 8000b36:	2300      	movs	r3, #0
 8000b38:	e003      	b.n	8000b42 <N5110_Update+0x56>
  HAL_Delay(10);
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f001 fcdc 	bl	80024f8 <HAL_Delay>

  return true;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000a0 	.word	0x200000a0

08000b4c <N5110_Clear>:

void N5110_Clear()
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  for(int i = 0; i < N5110_PIXEL; i++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	e007      	b.n	8000b68 <N5110_Clear+0x1c>
  {
    FrameBuffer[i] = 0x00;
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <N5110_Clear+0x34>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < N5110_PIXEL; i++)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000b6e:	dbf3      	blt.n	8000b58 <N5110_Clear+0xc>
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	200000a0 	.word	0x200000a0

08000b84 <N5110_SetPixel>:
    FrameBuffer[i] = 0xFF;
  }
}

void N5110_SetPixel(uint8_t x, uint8_t y, bool set)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	71bb      	strb	r3, [r7, #6]
 8000b92:	4613      	mov	r3, r2
 8000b94:	717b      	strb	r3, [r7, #5]
  uint16_t by;
  uint8_t  bi;

  if(x < 0 || x >= N5110_MAX_WIDTH || y < 0 || y >= N5110_MAX_HEIGHT) return;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b53      	cmp	r3, #83	; 0x53
 8000b9a:	d83b      	bhi.n	8000c14 <N5110_SetPixel+0x90>
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	2b2f      	cmp	r3, #47	; 0x2f
 8000ba0:	d838      	bhi.n	8000c14 <N5110_SetPixel+0x90>

  by = (y / 8) * N5110_MAX_WIDTH + x;
 8000ba2:	79bb      	ldrb	r3, [r7, #6]
 8000ba4:	08db      	lsrs	r3, r3, #3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	0052      	lsls	r2, r2, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	00d2      	lsls	r2, r2, #3
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	81fb      	strh	r3, [r7, #14]
  bi = y % 8;
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	737b      	strb	r3, [r7, #13]

  if(set)
 8000bca:	797b      	ldrb	r3, [r7, #5]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00f      	beq.n	8000bf0 <N5110_SetPixel+0x6c>
  {
    FrameBuffer[by] |= (1 << bi);
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <N5110_SetPixel+0x9c>)
 8000bd4:	5cd3      	ldrb	r3, [r2, r3]
 8000bd6:	b25a      	sxtb	r2, r3
 8000bd8:	7b7b      	ldrb	r3, [r7, #13]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	b2d1      	uxtb	r1, r2
 8000bea:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <N5110_SetPixel+0x9c>)
 8000bec:	54d1      	strb	r1, [r2, r3]
 8000bee:	e012      	b.n	8000c16 <N5110_SetPixel+0x92>
  }
  else
  {
    FrameBuffer[by] &= ~(1 << bi);
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <N5110_SetPixel+0x9c>)
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
 8000bf6:	b25a      	sxtb	r2, r3
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	4013      	ands	r3, r2
 8000c08:	b25a      	sxtb	r2, r3
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
 8000c0c:	b2d1      	uxtb	r1, r2
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <N5110_SetPixel+0x9c>)
 8000c10:	54d1      	strb	r1, [r2, r3]
 8000c12:	e000      	b.n	8000c16 <N5110_SetPixel+0x92>
  if(x < 0 || x >= N5110_MAX_WIDTH || y < 0 || y >= N5110_MAX_HEIGHT) return;
 8000c14:	bf00      	nop
  }
}
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	200000a0 	.word	0x200000a0

08000c24 <N5110_SetFont>:

void N5110_SetFont(const uint8_t * font)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  CurrentFont = font;
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <N5110_SetFont+0x1c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000000 	.word	0x20000000

08000c44 <N5110_PrintChar>:

void N5110_PrintChar(uint8_t x, uint8_t y, char ch, bool set)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b08b      	sub	sp, #44	; 0x2c
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	4608      	mov	r0, r1
 8000c4e:	4611      	mov	r1, r2
 8000c50:	461a      	mov	r2, r3
 8000c52:	4623      	mov	r3, r4
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	4603      	mov	r3, r0
 8000c58:	71bb      	strb	r3, [r7, #6]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	717b      	strb	r3, [r7, #5]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	713b      	strb	r3, [r7, #4]
  uint8_t f_width  = CurrentFont[0];
 8000c62:	4b83      	ldr	r3, [pc, #524]	; (8000e70 <N5110_PrintChar+0x22c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	73fb      	strb	r3, [r7, #15]
  uint8_t f_height = CurrentFont[1];
 8000c6a:	4b81      	ldr	r3, [pc, #516]	; (8000e70 <N5110_PrintChar+0x22c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	785b      	ldrb	r3, [r3, #1]
 8000c70:	73bb      	strb	r3, [r7, #14]
  uint8_t f_offset = CurrentFont[2];
 8000c72:	4b7f      	ldr	r3, [pc, #508]	; (8000e70 <N5110_PrintChar+0x22c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	789b      	ldrb	r3, [r3, #2]
 8000c78:	737b      	strb	r3, [r7, #13]

  if((f_height % 8) == 0)
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d17b      	bne.n	8000d7e <N5110_PrintChar+0x13a>
  {
    uint16_t f_index = (ch - f_offset) * (f_width * f_height / 8) + FONT_HEADER_SIZE;
 8000c86:	797a      	ldrb	r2, [r7, #5]
 8000c88:	7b7b      	ldrb	r3, [r7, #13]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	7bb9      	ldrb	r1, [r7, #14]
 8000c92:	fb01 f303 	mul.w	r3, r1, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	da00      	bge.n	8000c9c <N5110_PrintChar+0x58>
 8000c9a:	3307      	adds	r3, #7
 8000c9c:	10db      	asrs	r3, r3, #3
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	fb12 f303 	smulbb	r3, r2, r3
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	817b      	strh	r3, [r7, #10]
    for(int row = 0; row < f_height / 8; row++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
 8000cae:	e05e      	b.n	8000d6e <N5110_PrintChar+0x12a>
    {
      for(int cx = 0; cx < f_width; cx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
 8000cb4:	e054      	b.n	8000d60 <N5110_PrintChar+0x11c>
      {
        for(int bi = 0; bi < 8; bi++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e04b      	b.n	8000d54 <N5110_PrintChar+0x110>
        {
          uint8_t cbyte = CurrentFont[f_index + cx + (row * f_width)];
 8000cbc:	4b6c      	ldr	r3, [pc, #432]	; (8000e70 <N5110_PrintChar+0x22c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	8979      	ldrh	r1, [r7, #10]
 8000cc2:	6a3a      	ldr	r2, [r7, #32]
 8000cc4:	4411      	add	r1, r2
 8000cc6:	7bfa      	ldrb	r2, [r7, #15]
 8000cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cca:	fb00 f202 	mul.w	r2, r0, r2
 8000cce:	440a      	add	r2, r1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	727b      	strb	r3, [r7, #9]
          if((cbyte & (1 << bi)) != 0)
 8000cd6:	7a7a      	ldrb	r2, [r7, #9]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	fa42 f303 	asr.w	r3, r2, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d014      	beq.n	8000d10 <N5110_PrintChar+0xcc>
          {
            N5110_SetPixel(x + cx, y + row * 8 + bi, set);
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4413      	add	r3, r2
 8000cee:	b2d8      	uxtb	r0, r3
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	793a      	ldrb	r2, [r7, #4]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f7ff ff3b 	bl	8000b84 <N5110_SetPixel>
 8000d0e:	e01e      	b.n	8000d4e <N5110_PrintChar+0x10a>
          }
          else
          {
            N5110_SetPixel(x + cx, y + row * 8 + bi, !set);
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2d8      	uxtb	r0, r3
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	4413      	add	r3, r2
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2d9      	uxtb	r1, r3
 8000d30:	793b      	ldrb	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf14      	ite	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	2300      	moveq	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f083 0301 	eor.w	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f7ff ff1b 	bl	8000b84 <N5110_SetPixel>
        for(int bi = 0; bi < 8; bi++)
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3301      	adds	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	2b07      	cmp	r3, #7
 8000d58:	ddb0      	ble.n	8000cbc <N5110_PrintChar+0x78>
      for(int cx = 0; cx < f_width; cx++)
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	6a3a      	ldr	r2, [r7, #32]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dba6      	blt.n	8000cb6 <N5110_PrintChar+0x72>
    for(int row = 0; row < f_height / 8; row++)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	08db      	lsrs	r3, r3, #3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	db99      	blt.n	8000cb0 <N5110_PrintChar+0x6c>
          cbyte = CurrentFont[f_index];
        }
      }
    }
  }
}
 8000d7c:	e073      	b.n	8000e66 <N5110_PrintChar+0x222>
    uint16_t f_index = (ch - f_offset) * (f_width * f_height / 8) + FONT_HEADER_SIZE;
 8000d7e:	797a      	ldrb	r2, [r7, #5]
 8000d80:	7b7b      	ldrb	r3, [r7, #13]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	7bb9      	ldrb	r1, [r7, #14]
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	da00      	bge.n	8000d94 <N5110_PrintChar+0x150>
 8000d92:	3307      	adds	r3, #7
 8000d94:	10db      	asrs	r3, r3, #3
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	fb12 f303 	smulbb	r3, r2, r3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3304      	adds	r3, #4
 8000da0:	837b      	strh	r3, [r7, #26]
    uint8_t cbyte = CurrentFont[f_index];
 8000da2:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <N5110_PrintChar+0x22c>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	8b7b      	ldrh	r3, [r7, #26]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	767b      	strb	r3, [r7, #25]
    int8_t bi = 7;
 8000dae:	2307      	movs	r3, #7
 8000db0:	763b      	strb	r3, [r7, #24]
    for(int cx = 0; cx < f_width; cx++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e052      	b.n	8000e5e <N5110_PrintChar+0x21a>
      for(int cy = 0; cy < f_height; cy++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	e048      	b.n	8000e50 <N5110_PrintChar+0x20c>
        if((cbyte & (1 << bi)) != 0)
 8000dbe:	7e7a      	ldrb	r2, [r7, #25]
 8000dc0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000dc4:	fa42 f303 	asr.w	r3, r2, r3
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00e      	beq.n	8000dee <N5110_PrintChar+0x1aa>
          N5110_SetPixel(x+cx, y+cy, set);
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b2d8      	uxtb	r0, r3
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	79bb      	ldrb	r3, [r7, #6]
 8000de0:	4413      	add	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	793a      	ldrb	r2, [r7, #4]
 8000de6:	4619      	mov	r1, r3
 8000de8:	f7ff fecc 	bl	8000b84 <N5110_SetPixel>
 8000dec:	e018      	b.n	8000e20 <N5110_PrintChar+0x1dc>
          N5110_SetPixel(x+cx, y+cy, !set);
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	4413      	add	r3, r2
 8000df6:	b2d8      	uxtb	r0, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	793b      	ldrb	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f083 0301 	eor.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f7ff feb2 	bl	8000b84 <N5110_SetPixel>
        bi--;
 8000e20:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	763b      	strb	r3, [r7, #24]
        if(bi < 0)
 8000e2c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	da0a      	bge.n	8000e4a <N5110_PrintChar+0x206>
          bi = 7;
 8000e34:	2307      	movs	r3, #7
 8000e36:	763b      	strb	r3, [r7, #24]
          f_index++;
 8000e38:	8b7b      	ldrh	r3, [r7, #26]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	837b      	strh	r3, [r7, #26]
          cbyte = CurrentFont[f_index];
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <N5110_PrintChar+0x22c>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	8b7b      	ldrh	r3, [r7, #26]
 8000e44:	4413      	add	r3, r2
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	767b      	strb	r3, [r7, #25]
      for(int cy = 0; cy < f_height; cy++)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	7bbb      	ldrb	r3, [r7, #14]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbb2      	blt.n	8000dbe <N5110_PrintChar+0x17a>
    for(int cx = 0; cx < f_width; cx++)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	dba8      	blt.n	8000db8 <N5110_PrintChar+0x174>
}
 8000e66:	bf00      	nop
 8000e68:	372c      	adds	r7, #44	; 0x2c
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000

08000e74 <N5110_PrintStr>:

void N5110_PrintStr(uint8_t x, uint8_t y, char *str, bool set)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	603a      	str	r2, [r7, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	460b      	mov	r3, r1
 8000e84:	71bb      	strb	r3, [r7, #6]
 8000e86:	4613      	mov	r3, r2
 8000e88:	717b      	strb	r3, [r7, #5]
  uint8_t f_width  = CurrentFont[0];
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <N5110_PrintStr+0x68>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	72fb      	strb	r3, [r7, #11]
  uint8_t length = strlen(str);
 8000e92:	6838      	ldr	r0, [r7, #0]
 8000e94:	f7ff f99c 	bl	80001d0 <strlen>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	72bb      	strb	r3, [r7, #10]

  for(int i = 0; i < length; i++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	e013      	b.n	8000eca <N5110_PrintStr+0x56>
  {
    N5110_PrintChar(x + (i * f_width), y, *str++, set);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	7afa      	ldrb	r2, [r7, #11]
 8000ea8:	fb12 f303 	smulbb	r3, r2, r3
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b2d8      	uxtb	r0, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	603a      	str	r2, [r7, #0]
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	797b      	ldrb	r3, [r7, #5]
 8000ebe:	79b9      	ldrb	r1, [r7, #6]
 8000ec0:	f7ff fec0 	bl	8000c44 <N5110_PrintChar>
  for(int i = 0; i < length; i++)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	7abb      	ldrb	r3, [r7, #10]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dbe7      	blt.n	8000ea2 <N5110_PrintStr+0x2e>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000

08000ee0 <N5110_DrawHLine>:

void N5110_DrawHLine(uint8_t x, uint8_t y, uint8_t length, bool set)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	4623      	mov	r3, r4
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	717b      	strb	r3, [r7, #5]
 8000efa:	4613      	mov	r3, r2
 8000efc:	713b      	strb	r3, [r7, #4]
  for(int cx = 0; cx < length; cx++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	e00c      	b.n	8000f1e <N5110_DrawHLine+0x3e>
  {
    N5110_SetPixel(x+cx, y, set);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	793a      	ldrb	r2, [r7, #4]
 8000f10:	79b9      	ldrb	r1, [r7, #6]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe36 	bl	8000b84 <N5110_SetPixel>
  for(int cx = 0; cx < length; cx++)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	797b      	ldrb	r3, [r7, #5]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dbee      	blt.n	8000f04 <N5110_DrawHLine+0x24>
  }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd90      	pop	{r4, r7, pc}

08000f30 <N5110_DrawVLine>:

void N5110_DrawVLine(uint8_t x, uint8_t y, uint8_t length, bool set)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	4603      	mov	r3, r0
 8000f44:	71bb      	strb	r3, [r7, #6]
 8000f46:	460b      	mov	r3, r1
 8000f48:	717b      	strb	r3, [r7, #5]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	713b      	strb	r3, [r7, #4]
  for(int cy = 0; cy < length; cy++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	e00c      	b.n	8000f6e <N5110_DrawVLine+0x3e>
  {
    N5110_SetPixel(x, y+cy, set);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b2d9      	uxtb	r1, r3
 8000f5e:	793a      	ldrb	r2, [r7, #4]
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fe0e 	bl	8000b84 <N5110_SetPixel>
  for(int cy = 0; cy < length; cy++)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	797b      	ldrb	r3, [r7, #5]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbee      	blt.n	8000f54 <N5110_DrawVLine+0x24>
  }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd90      	pop	{r4, r7, pc}

08000f80 <N5110_DrawLine>:

void N5110_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool set)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b08b      	sub	sp, #44	; 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	4603      	mov	r3, r0
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	460b      	mov	r3, r1
 8000f98:	717b      	strb	r3, [r7, #5]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	713b      	strb	r3, [r7, #4]
  uint8_t tmp;
  float delta, tx, ty;

  if(x1 > x2)
 8000f9e:	79fa      	ldrb	r2, [r7, #7]
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d90b      	bls.n	8000fbe <N5110_DrawLine+0x3e>
  {
    tmp = x1;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	74fb      	strb	r3, [r7, #19]
    x1 = x2;
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	71fb      	strb	r3, [r7, #7]
    x2 = tmp;
 8000fae:	7cfb      	ldrb	r3, [r7, #19]
 8000fb0:	717b      	strb	r3, [r7, #5]

    tmp = y1;
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	74fb      	strb	r3, [r7, #19]
    y1 = y2;
 8000fb6:	793b      	ldrb	r3, [r7, #4]
 8000fb8:	71bb      	strb	r3, [r7, #6]
    y2 = tmp;
 8000fba:	7cfb      	ldrb	r3, [r7, #19]
 8000fbc:	713b      	strb	r3, [r7, #4]
  }

  if(y1 > y2)
 8000fbe:	79ba      	ldrb	r2, [r7, #6]
 8000fc0:	793b      	ldrb	r3, [r7, #4]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d90b      	bls.n	8000fde <N5110_DrawLine+0x5e>
  {
    tmp = x1;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	74fb      	strb	r3, [r7, #19]
    x1 = x2;
 8000fca:	797b      	ldrb	r3, [r7, #5]
 8000fcc:	71fb      	strb	r3, [r7, #7]
    x2 = tmp;
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	717b      	strb	r3, [r7, #5]

    tmp = y1;
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	74fb      	strb	r3, [r7, #19]
    y1 = y2;
 8000fd6:	793b      	ldrb	r3, [r7, #4]
 8000fd8:	71bb      	strb	r3, [r7, #6]
    y2 = tmp;
 8000fda:	7cfb      	ldrb	r3, [r7, #19]
 8000fdc:	713b      	strb	r3, [r7, #4]
  }

  if(y1 == y2)
 8000fde:	79ba      	ldrb	r2, [r7, #6]
 8000fe0:	793b      	ldrb	r3, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d114      	bne.n	8001010 <N5110_DrawLine+0x90>
  {
    if(x1 > x2)
 8000fe6:	79fa      	ldrb	r2, [r7, #7]
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d905      	bls.n	8000ffa <N5110_DrawLine+0x7a>
    {
      tmp = x1;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	74fb      	strb	r3, [r7, #19]
      x1 = x2;
 8000ff2:	797b      	ldrb	r3, [r7, #5]
 8000ff4:	71fb      	strb	r3, [r7, #7]
      x2 = tmp;
 8000ff6:	7cfb      	ldrb	r3, [r7, #19]
 8000ff8:	717b      	strb	r3, [r7, #5]
    }

    N5110_DrawHLine(x1, y1, x2-x1, set);
 8000ffa:	797a      	ldrb	r2, [r7, #5]
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	b2da      	uxtb	r2, r3
 8001002:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001006:	79b9      	ldrb	r1, [r7, #6]
 8001008:	79f8      	ldrb	r0, [r7, #7]
 800100a:	f7ff ff69 	bl	8000ee0 <N5110_DrawHLine>
        N5110_SetPixel((uint8_t)(tx+0.5), i, set);
        tx=tx+delta;
      }
    }
  }
}
 800100e:	e10c      	b.n	800122a <N5110_DrawLine+0x2aa>
  else if(x1 == x2)
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	429a      	cmp	r2, r3
 8001016:	d114      	bne.n	8001042 <N5110_DrawLine+0xc2>
    if(y1 > y2)
 8001018:	79ba      	ldrb	r2, [r7, #6]
 800101a:	793b      	ldrb	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	d905      	bls.n	800102c <N5110_DrawLine+0xac>
      tmp = y1;
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	74fb      	strb	r3, [r7, #19]
      y1 = y2;
 8001024:	793b      	ldrb	r3, [r7, #4]
 8001026:	71bb      	strb	r3, [r7, #6]
      y2 = tmp;
 8001028:	7cfb      	ldrb	r3, [r7, #19]
 800102a:	713b      	strb	r3, [r7, #4]
    N5110_DrawVLine(x1, y1, y2-y1, set);
 800102c:	793a      	ldrb	r2, [r7, #4]
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b2da      	uxtb	r2, r3
 8001034:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001038:	79b9      	ldrb	r1, [r7, #6]
 800103a:	79f8      	ldrb	r0, [r7, #7]
 800103c:	f7ff ff78 	bl	8000f30 <N5110_DrawVLine>
}
 8001040:	e0f3      	b.n	800122a <N5110_DrawLine+0x2aa>
  else if (abs(x2-x1)>abs(y2-y1))
 8001042:	797a      	ldrb	r2, [r7, #5]
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800104c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001050:	7939      	ldrb	r1, [r7, #4]
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	1acb      	subs	r3, r1, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	bfb8      	it	lt
 800105a:	425b      	neglt	r3, r3
 800105c:	429a      	cmp	r2, r3
 800105e:	dd73      	ble.n	8001148 <N5110_DrawLine+0x1c8>
    delta = (float)((float)(y2-y1)/(float)(x2-x1));
 8001060:	793a      	ldrb	r2, [r7, #4]
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800106e:	797a      	ldrb	r2, [r7, #5]
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001080:	edc7 7a03 	vstr	s15, [r7, #12]
    ty = (float)y1;
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108e:	edc7 7a08 	vstr	s15, [r7, #32]
    if (x1 > x2)
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	797b      	ldrb	r3, [r7, #5]
 8001096:	429a      	cmp	r2, r3
 8001098:	d92d      	bls.n	80010f6 <N5110_DrawLine+0x176>
      for (int8_t i = x1; i >= x2; i--)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	77fb      	strb	r3, [r7, #31]
 800109e:	e024      	b.n	80010ea <N5110_DrawLine+0x16a>
        N5110_SetPixel(i, (uint8_t)(ty+0.5), set);
 80010a0:	7ffc      	ldrb	r4, [r7, #31]
 80010a2:	6a38      	ldr	r0, [r7, #32]
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b61      	ldr	r3, [pc, #388]	; (8001234 <N5110_DrawLine+0x2b4>)
 80010ae:	f7ff f8ed 	bl	800028c <__adddf3>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fa9d 	bl	80005f8 <__aeabi_d2uiz>
 80010be:	4603      	mov	r3, r0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80010c6:	4619      	mov	r1, r3
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff fd5b 	bl	8000b84 <N5110_SetPixel>
        ty = ty-delta;
 80010ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80010d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010da:	edc7 7a08 	vstr	s15, [r7, #32]
      for (int8_t i = x1; i >= x2; i--)
 80010de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3b01      	subs	r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	77fb      	strb	r3, [r7, #31]
 80010ea:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80010ee:	797b      	ldrb	r3, [r7, #5]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dad5      	bge.n	80010a0 <N5110_DrawLine+0x120>
}
 80010f4:	e099      	b.n	800122a <N5110_DrawLine+0x2aa>
      for (uint8_t i = x1; i <= x2; i++)
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	77bb      	strb	r3, [r7, #30]
 80010fa:	e020      	b.n	800113e <N5110_DrawLine+0x1be>
        N5110_SetPixel(i, (uint8_t)(ty+0.5), set);
 80010fc:	6a38      	ldr	r0, [r7, #32]
 80010fe:	f7ff fa23 	bl	8000548 <__aeabi_f2d>
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b4b      	ldr	r3, [pc, #300]	; (8001234 <N5110_DrawLine+0x2b4>)
 8001108:	f7ff f8c0 	bl	800028c <__adddf3>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fa70 	bl	80005f8 <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
 800111a:	b2d9      	uxtb	r1, r3
 800111c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001120:	7fbb      	ldrb	r3, [r7, #30]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fd2e 	bl	8000b84 <N5110_SetPixel>
        ty = ty+delta;
 8001128:	ed97 7a08 	vldr	s14, [r7, #32]
 800112c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	edc7 7a08 	vstr	s15, [r7, #32]
      for (uint8_t i = x1; i <= x2; i++)
 8001138:	7fbb      	ldrb	r3, [r7, #30]
 800113a:	3301      	adds	r3, #1
 800113c:	77bb      	strb	r3, [r7, #30]
 800113e:	7fba      	ldrb	r2, [r7, #30]
 8001140:	797b      	ldrb	r3, [r7, #5]
 8001142:	429a      	cmp	r2, r3
 8001144:	d9da      	bls.n	80010fc <N5110_DrawLine+0x17c>
}
 8001146:	e070      	b.n	800122a <N5110_DrawLine+0x2aa>
    delta = (float)((float)(x2-x1)/(float)(y2-y1));
 8001148:	797a      	ldrb	r2, [r7, #5]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001156:	793a      	ldrb	r2, [r7, #4]
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001168:	edc7 7a03 	vstr	s15, [r7, #12]
    tx = (float)x1;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001176:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if(y1 > y2)
 800117a:	79ba      	ldrb	r2, [r7, #6]
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	d92a      	bls.n	80011d8 <N5110_DrawLine+0x258>
      for(int i = y2+1; i > y1; i--)
 8001182:	793b      	ldrb	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	e021      	b.n	80011ce <N5110_DrawLine+0x24e>
        N5110_SetPixel((uint8_t)(tx+0.5), i, set);
 800118a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800118c:	f7ff f9dc 	bl	8000548 <__aeabi_f2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <N5110_DrawLine+0x2b4>)
 8001196:	f7ff f879 	bl	800028c <__adddf3>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fa29 	bl	80005f8 <__aeabi_d2uiz>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	b2d1      	uxtb	r1, r2
 80011ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fce6 	bl	8000b84 <N5110_SetPixel>
        tx = tx+delta;
 80011b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      for(int i = y2+1; i > y1; i--)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dcd9      	bgt.n	800118a <N5110_DrawLine+0x20a>
}
 80011d6:	e028      	b.n	800122a <N5110_DrawLine+0x2aa>
      for (int i = y1; i < y2+1; i++)
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	e021      	b.n	8001222 <N5110_DrawLine+0x2a2>
        N5110_SetPixel((uint8_t)(tx+0.5), i, set);
 80011de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_f2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <N5110_DrawLine+0x2b4>)
 80011ea:	f7ff f84f 	bl	800028c <__adddf3>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff f9ff 	bl	80005f8 <__aeabi_d2uiz>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	b2d1      	uxtb	r1, r2
 8001202:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fcbc 	bl	8000b84 <N5110_SetPixel>
        tx=tx+delta;
 800120c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001210:	edd7 7a03 	vldr	s15, [r7, #12]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      for (int i = y1; i < y2+1; i++)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	793b      	ldrb	r3, [r7, #4]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	429a      	cmp	r2, r3
 8001228:	ddd9      	ble.n	80011de <N5110_DrawLine+0x25e>
}
 800122a:	bf00      	nop
 800122c:	372c      	adds	r7, #44	; 0x2c
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	3fe00000 	.word	0x3fe00000

08001238 <N5110_DrawRect>:

void N5110_DrawRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool set, bool fill)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	4604      	mov	r4, r0
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	4603      	mov	r3, r0
 800124c:	71bb      	strb	r3, [r7, #6]
 800124e:	460b      	mov	r3, r1
 8001250:	717b      	strb	r3, [r7, #5]
 8001252:	4613      	mov	r3, r2
 8001254:	713b      	strb	r3, [r7, #4]
  uint8_t tmp;

  /* Swap position to make x2 and y2 are bigger than x1 and y1 */
  if(x2 < x1)
 8001256:	797a      	ldrb	r2, [r7, #5]
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	429a      	cmp	r2, r3
 800125c:	d205      	bcs.n	800126a <N5110_DrawRect+0x32>
  {
    tmp = x1;
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	73fb      	strb	r3, [r7, #15]
    x1 = x2;
 8001262:	797b      	ldrb	r3, [r7, #5]
 8001264:	71fb      	strb	r3, [r7, #7]
    x2 = tmp;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	717b      	strb	r3, [r7, #5]
  }

  if(y2 < y1)
 800126a:	793a      	ldrb	r2, [r7, #4]
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	429a      	cmp	r2, r3
 8001270:	d205      	bcs.n	800127e <N5110_DrawRect+0x46>
  {
    tmp = y1;
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	73fb      	strb	r3, [r7, #15]
    y1 = y2;
 8001276:	793b      	ldrb	r3, [r7, #4]
 8001278:	71bb      	strb	r3, [r7, #6]
    y2 = tmp;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	713b      	strb	r3, [r7, #4]
  }

  if(fill)
 800127e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01d      	beq.n	80012c2 <N5110_DrawRect+0x8a>
  {
    for(int i = x1; i <= x2; i++)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	e015      	b.n	80012b8 <N5110_DrawRect+0x80>
    {
      for(int j = y1; j <= y2; j++)
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	e00b      	b.n	80012aa <N5110_DrawRect+0x72>
      {
        N5110_SetPixel(i, j, set);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	b2d1      	uxtb	r1, r2
 800129a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fc70 	bl	8000b84 <N5110_SetPixel>
      for(int j = y1; j <= y2; j++)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	3301      	adds	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	793b      	ldrb	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	ddef      	ble.n	8001292 <N5110_DrawRect+0x5a>
    for(int i = x1; i <= x2; i++)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dde5      	ble.n	800128c <N5110_DrawRect+0x54>
    N5110_DrawHLine(x1, y1, x2-x1, set);
    N5110_DrawHLine(x1, y2, x2-x1, set);
    N5110_DrawVLine(x1, y1, y2-y1, set);
    N5110_DrawVLine(x2, y1, y2-y1, set);
  }
}
 80012c0:	e027      	b.n	8001312 <N5110_DrawRect+0xda>
    N5110_DrawHLine(x1, y1, x2-x1, set);
 80012c2:	797a      	ldrb	r2, [r7, #5]
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012ce:	79b9      	ldrb	r1, [r7, #6]
 80012d0:	79f8      	ldrb	r0, [r7, #7]
 80012d2:	f7ff fe05 	bl	8000ee0 <N5110_DrawHLine>
    N5110_DrawHLine(x1, y2, x2-x1, set);
 80012d6:	797a      	ldrb	r2, [r7, #5]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012e2:	7939      	ldrb	r1, [r7, #4]
 80012e4:	79f8      	ldrb	r0, [r7, #7]
 80012e6:	f7ff fdfb 	bl	8000ee0 <N5110_DrawHLine>
    N5110_DrawVLine(x1, y1, y2-y1, set);
 80012ea:	793a      	ldrb	r2, [r7, #4]
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012f6:	79b9      	ldrb	r1, [r7, #6]
 80012f8:	79f8      	ldrb	r0, [r7, #7]
 80012fa:	f7ff fe19 	bl	8000f30 <N5110_DrawVLine>
    N5110_DrawVLine(x2, y1, y2-y1, set);
 80012fe:	793a      	ldrb	r2, [r7, #4]
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	b2da      	uxtb	r2, r3
 8001306:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800130a:	79b9      	ldrb	r1, [r7, #6]
 800130c:	7978      	ldrb	r0, [r7, #5]
 800130e:	f7ff fe0f 	bl	8000f30 <N5110_DrawVLine>
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}

0800131a <N5110_DrawCircle>:
    N5110_DrawVLine(x2, y1+2, y2-y1-3, set);
  }
}

void N5110_DrawCircle(uint8_t x, uint8_t y, uint8_t radius, bool set, bool fill)
{
 800131a:	b590      	push	{r4, r7, lr}
 800131c:	b087      	sub	sp, #28
 800131e:	af02      	add	r7, sp, #8
 8001320:	4604      	mov	r4, r0
 8001322:	4608      	mov	r0, r1
 8001324:	4611      	mov	r1, r2
 8001326:	461a      	mov	r2, r3
 8001328:	4623      	mov	r3, r4
 800132a:	71fb      	strb	r3, [r7, #7]
 800132c:	4603      	mov	r3, r0
 800132e:	71bb      	strb	r3, [r7, #6]
 8001330:	460b      	mov	r3, r1
 8001332:	717b      	strb	r3, [r7, #5]
 8001334:	4613      	mov	r3, r2
 8001336:	713b      	strb	r3, [r7, #4]
  int8_t a = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
  int8_t b = radius;
 800133c:	797b      	ldrb	r3, [r7, #5]
 800133e:	73bb      	strb	r3, [r7, #14]
  int8_t p = 1 - radius;
 8001340:	797b      	ldrb	r3, [r7, #5]
 8001342:	f1c3 0301 	rsb	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	737b      	strb	r3, [r7, #13]

  do
  {
    if(fill)
 800134a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d058      	beq.n	8001404 <N5110_DrawCircle+0xea>
    {
      N5110_DrawLine(x-a, y+b, x+a, y+b, set);
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	79fa      	ldrb	r2, [r7, #7]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	b2d8      	uxtb	r0, r3
 800135a:	7bba      	ldrb	r2, [r7, #14]
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	4413      	add	r3, r2
 8001360:	b2d9      	uxtb	r1, r3
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4413      	add	r3, r2
 8001368:	b2dc      	uxtb	r4, r3
 800136a:	7bba      	ldrb	r2, [r7, #14]
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	4413      	add	r3, r2
 8001370:	b2da      	uxtb	r2, r3
 8001372:	793b      	ldrb	r3, [r7, #4]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	4613      	mov	r3, r2
 8001378:	4622      	mov	r2, r4
 800137a:	f7ff fe01 	bl	8000f80 <N5110_DrawLine>
      N5110_DrawLine(x-a, y-b, x+a, y-b, set);
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	79fa      	ldrb	r2, [r7, #7]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b2d8      	uxtb	r0, r3
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	79ba      	ldrb	r2, [r7, #6]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	b2d9      	uxtb	r1, r3
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4413      	add	r3, r2
 8001394:	b2dc      	uxtb	r4, r3
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	79ba      	ldrb	r2, [r7, #6]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b2da      	uxtb	r2, r3
 800139e:	793b      	ldrb	r3, [r7, #4]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4613      	mov	r3, r2
 80013a4:	4622      	mov	r2, r4
 80013a6:	f7ff fdeb 	bl	8000f80 <N5110_DrawLine>
      N5110_DrawLine(x-b, y+a, x+b, y+a, set);
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	4413      	add	r3, r2
 80013b8:	b2d9      	uxtb	r1, r3
 80013ba:	7bba      	ldrb	r2, [r7, #14]
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4413      	add	r3, r2
 80013c0:	b2dc      	uxtb	r4, r3
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	4413      	add	r3, r2
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	793b      	ldrb	r3, [r7, #4]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4613      	mov	r3, r2
 80013d0:	4622      	mov	r2, r4
 80013d2:	f7ff fdd5 	bl	8000f80 <N5110_DrawLine>
      N5110_DrawLine(x-b, y-a, x+b, y-a, set);
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b2d8      	uxtb	r0, r3
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	79ba      	ldrb	r2, [r7, #6]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b2d9      	uxtb	r1, r3
 80013e6:	7bba      	ldrb	r2, [r7, #14]
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4413      	add	r3, r2
 80013ec:	b2dc      	uxtb	r4, r3
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	79ba      	ldrb	r2, [r7, #6]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	793b      	ldrb	r3, [r7, #4]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4613      	mov	r3, r2
 80013fc:	4622      	mov	r2, r4
 80013fe:	f7ff fdbf 	bl	8000f80 <N5110_DrawLine>
 8001402:	e05f      	b.n	80014c4 <N5110_DrawCircle+0x1aa>
    }
    else
    {
      N5110_SetPixel(x+a, y+b, set);
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4413      	add	r3, r2
 800140a:	b2d8      	uxtb	r0, r3
 800140c:	7bba      	ldrb	r2, [r7, #14]
 800140e:	79bb      	ldrb	r3, [r7, #6]
 8001410:	4413      	add	r3, r2
 8001412:	b2db      	uxtb	r3, r3
 8001414:	793a      	ldrb	r2, [r7, #4]
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fbb4 	bl	8000b84 <N5110_SetPixel>
      N5110_SetPixel(x-a, y+b, set);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b2d8      	uxtb	r0, r3
 8001424:	7bba      	ldrb	r2, [r7, #14]
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	4413      	add	r3, r2
 800142a:	b2db      	uxtb	r3, r3
 800142c:	793a      	ldrb	r2, [r7, #4]
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fba8 	bl	8000b84 <N5110_SetPixel>
      N5110_SetPixel(x+a, y-b, set);
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4413      	add	r3, r2
 800143a:	b2d8      	uxtb	r0, r3
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	79ba      	ldrb	r2, [r7, #6]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	793a      	ldrb	r2, [r7, #4]
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fb9c 	bl	8000b84 <N5110_SetPixel>
      N5110_SetPixel(x-a, y-b, set);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	b2d8      	uxtb	r0, r3
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	79ba      	ldrb	r2, [r7, #6]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	793a      	ldrb	r2, [r7, #4]
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fb90 	bl	8000b84 <N5110_SetPixel>
      N5110_SetPixel(x+b, y+a, set);
 8001464:	7bba      	ldrb	r2, [r7, #14]
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4413      	add	r3, r2
 800146a:	b2d8      	uxtb	r0, r3
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	4413      	add	r3, r2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	793a      	ldrb	r2, [r7, #4]
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb84 	bl	8000b84 <N5110_SetPixel>
      N5110_SetPixel(x-b, y+a, set);
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	4413      	add	r3, r2
 800148a:	b2db      	uxtb	r3, r3
 800148c:	793a      	ldrb	r2, [r7, #4]
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb78 	bl	8000b84 <N5110_SetPixel>
      N5110_SetPixel(x+b, y-a, set);
 8001494:	7bba      	ldrb	r2, [r7, #14]
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4413      	add	r3, r2
 800149a:	b2d8      	uxtb	r0, r3
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	79ba      	ldrb	r2, [r7, #6]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	793a      	ldrb	r2, [r7, #4]
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb6c 	bl	8000b84 <N5110_SetPixel>
      N5110_SetPixel(x-b, y-a, set);
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b2d8      	uxtb	r0, r3
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	79ba      	ldrb	r2, [r7, #6]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	793a      	ldrb	r2, [r7, #4]
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fb60 	bl	8000b84 <N5110_SetPixel>
    }

    if(p < 0)
 80014c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da0f      	bge.n	80014ec <N5110_DrawCircle+0x1d2>
    {
      p += (3 + 2*a);
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	7b7b      	ldrb	r3, [r7, #13]
 80014d4:	4413      	add	r3, r2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	3303      	adds	r3, #3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	737b      	strb	r3, [r7, #13]
      a++;
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e019      	b.n	8001520 <N5110_DrawCircle+0x206>
    }
    else
    {
      p += (5 + 2*(a-b));
 80014ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80014f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	7b7b      	ldrb	r3, [r7, #13]
 80014fe:	4413      	add	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3305      	adds	r3, #5
 8001504:	b2db      	uxtb	r3, r3
 8001506:	737b      	strb	r3, [r7, #13]
      a++;
 8001508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	3301      	adds	r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	73fb      	strb	r3, [r7, #15]
      b--;
 8001514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3b01      	subs	r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	73bb      	strb	r3, [r7, #14]
    }
  } while(a <=b);
 8001520:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001528:	429a      	cmp	r2, r3
 800152a:	f77f af0e 	ble.w	800134a <N5110_DrawCircle+0x30>
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bd90      	pop	{r4, r7, pc}

08001538 <HAL_GPIO_EXTI_Callback>:
void drawSnake();
void initGame();
void moveSnake();
void gameOver();
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LEFT_Pin)
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d13d      	bne.n	80015c4 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154c:	4881      	ldr	r0, [pc, #516]	; (8001754 <HAL_GPIO_EXTI_Callback+0x21c>)
 800154e:	f001 fe68 	bl	8003222 <HAL_GPIO_TogglePin>
		if(direction.x != 3 && direction.y != 0)
 8001552:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d00a      	beq.n	8001570 <HAL_GPIO_EXTI_Callback+0x38>
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <HAL_GPIO_EXTI_Callback+0x38>
		{
			direction.x = -3;
 8001562:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 8001564:	f06f 0202 	mvn.w	r2, #2
 8001568:	601a      	str	r2, [r3, #0]
			direction.y = 0;
 800156a:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
		}
		for(int i = 0; i < 100000; i++); // Delay
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
 8001574:	e002      	b.n	800157c <HAL_GPIO_EXTI_Callback+0x44>
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	3301      	adds	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	4a77      	ldr	r2, [pc, #476]	; (800175c <HAL_GPIO_EXTI_Callback+0x224>)
 8001580:	4293      	cmp	r3, r2
 8001582:	ddf8      	ble.n	8001576 <HAL_GPIO_EXTI_Callback+0x3e>
		int timeout;
		while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) & (timeout < 50000))
 8001584:	e002      	b.n	800158c <HAL_GPIO_EXTI_Callback+0x54>
		{
			timeout++;
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	3301      	adds	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
		while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) & (timeout < 50000))
 800158c:	2102      	movs	r1, #2
 800158e:	4871      	ldr	r0, [pc, #452]	; (8001754 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001590:	f001 fe16 	bl	80031c0 <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	f24c 314f 	movw	r1, #49999	; 0xc34f
 80015a6:	428b      	cmp	r3, r1
 80015a8:	bfd4      	ite	le
 80015aa:	2301      	movle	r3, #1
 80015ac:	2300      	movgt	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4013      	ands	r3, r2
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e6      	bne.n	8001586 <HAL_GPIO_EXTI_Callback+0x4e>
		}
		EXTI->PR |= GPIO_PIN_1;
 80015b8:	4b69      	ldr	r3, [pc, #420]	; (8001760 <HAL_GPIO_EXTI_Callback+0x228>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	4a68      	ldr	r2, [pc, #416]	; (8001760 <HAL_GPIO_EXTI_Callback+0x228>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	6153      	str	r3, [r2, #20]
	}
	if(GPIO_Pin == RIGHT_Pin)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d13d      	bne.n	8001646 <HAL_GPIO_EXTI_Callback+0x10e>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80015ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ce:	4861      	ldr	r0, [pc, #388]	; (8001754 <HAL_GPIO_EXTI_Callback+0x21c>)
 80015d0:	f001 fe27 	bl	8003222 <HAL_GPIO_TogglePin>
		if(direction.x != -3 && direction.y != 0)
 80015d4:	4b60      	ldr	r3, [pc, #384]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f113 0f03 	cmn.w	r3, #3
 80015dc:	d009      	beq.n	80015f2 <HAL_GPIO_EXTI_Callback+0xba>
 80015de:	4b5e      	ldr	r3, [pc, #376]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_GPIO_EXTI_Callback+0xba>
		{
			direction.x = 3;
 80015e6:	4b5c      	ldr	r3, [pc, #368]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 80015e8:	2203      	movs	r2, #3
 80015ea:	601a      	str	r2, [r3, #0]
			direction.y = 0;
 80015ec:	4b5a      	ldr	r3, [pc, #360]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
		}
		for(int i = 0; i < 100000; i++); // Delay
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_EXTI_Callback+0xc6>
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4a56      	ldr	r2, [pc, #344]	; (800175c <HAL_GPIO_EXTI_Callback+0x224>)
 8001602:	4293      	cmp	r3, r2
 8001604:	ddf8      	ble.n	80015f8 <HAL_GPIO_EXTI_Callback+0xc0>
		int timeout;
		while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) & (timeout < 50000))
 8001606:	e002      	b.n	800160e <HAL_GPIO_EXTI_Callback+0xd6>
		{
			timeout++;
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	3301      	adds	r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
		while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) & (timeout < 50000))
 800160e:	2104      	movs	r1, #4
 8001610:	4850      	ldr	r0, [pc, #320]	; (8001754 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001612:	f001 fdd5 	bl	80031c0 <HAL_GPIO_ReadPin>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2da      	uxtb	r2, r3
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f24c 314f 	movw	r1, #49999	; 0xc34f
 8001628:	428b      	cmp	r3, r1
 800162a:	bfd4      	ite	le
 800162c:	2301      	movle	r3, #1
 800162e:	2300      	movgt	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4013      	ands	r3, r2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1e6      	bne.n	8001608 <HAL_GPIO_EXTI_Callback+0xd0>
		}
		EXTI->PR |= GPIO_PIN_2;
 800163a:	4b49      	ldr	r3, [pc, #292]	; (8001760 <HAL_GPIO_EXTI_Callback+0x228>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a48      	ldr	r2, [pc, #288]	; (8001760 <HAL_GPIO_EXTI_Callback+0x228>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6153      	str	r3, [r2, #20]
	}
	if(GPIO_Pin == UP_Pin)
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	2b08      	cmp	r3, #8
 800164a:	d13d      	bne.n	80016c8 <HAL_GPIO_EXTI_Callback+0x190>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800164c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001650:	4840      	ldr	r0, [pc, #256]	; (8001754 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001652:	f001 fde6 	bl	8003222 <HAL_GPIO_TogglePin>
		if(direction.x != 0 && direction.y != 3)
 8001656:	4b40      	ldr	r3, [pc, #256]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00a      	beq.n	8001674 <HAL_GPIO_EXTI_Callback+0x13c>
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_EXTI_Callback+0x13c>
		{
			direction.x = 0;
 8001666:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
			direction.y = -3;
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 800166e:	f06f 0202 	mvn.w	r2, #2
 8001672:	605a      	str	r2, [r3, #4]
		}
		for(int i = 0; i < 100000; i++); // Delay
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e002      	b.n	8001680 <HAL_GPIO_EXTI_Callback+0x148>
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	4a36      	ldr	r2, [pc, #216]	; (800175c <HAL_GPIO_EXTI_Callback+0x224>)
 8001684:	4293      	cmp	r3, r2
 8001686:	ddf8      	ble.n	800167a <HAL_GPIO_EXTI_Callback+0x142>
		int timeout;
		while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) & (timeout < 50000))
 8001688:	e002      	b.n	8001690 <HAL_GPIO_EXTI_Callback+0x158>
		{
			timeout++;
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	3301      	adds	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) & (timeout < 50000))
 8001690:	2108      	movs	r1, #8
 8001692:	4830      	ldr	r0, [pc, #192]	; (8001754 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001694:	f001 fd94 	bl	80031c0 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf0c      	ite	eq
 800169e:	2301      	moveq	r3, #1
 80016a0:	2300      	movne	r3, #0
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f24c 314f 	movw	r1, #49999	; 0xc34f
 80016aa:	428b      	cmp	r3, r1
 80016ac:	bfd4      	ite	le
 80016ae:	2301      	movle	r3, #1
 80016b0:	2300      	movgt	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e6      	bne.n	800168a <HAL_GPIO_EXTI_Callback+0x152>
		}
		EXTI->PR |= GPIO_PIN_3;
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_GPIO_EXTI_Callback+0x228>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	4a27      	ldr	r2, [pc, #156]	; (8001760 <HAL_GPIO_EXTI_Callback+0x228>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6153      	str	r3, [r2, #20]
	}
	if(GPIO_Pin == DOWN_Pin)
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d13d      	bne.n	800174a <HAL_GPIO_EXTI_Callback+0x212>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80016ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d2:	4820      	ldr	r0, [pc, #128]	; (8001754 <HAL_GPIO_EXTI_Callback+0x21c>)
 80016d4:	f001 fda5 	bl	8003222 <HAL_GPIO_TogglePin>
		if(direction.x != 0 && direction.y != -3)
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00a      	beq.n	80016f6 <HAL_GPIO_EXTI_Callback+0x1be>
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f113 0f03 	cmn.w	r3, #3
 80016e8:	d005      	beq.n	80016f6 <HAL_GPIO_EXTI_Callback+0x1be>
		{
			direction.x = 0;
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
			direction.y = 3;
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_GPIO_EXTI_Callback+0x220>)
 80016f2:	2203      	movs	r2, #3
 80016f4:	605a      	str	r2, [r3, #4]
		}
		for(int i = 0; i < 100000; i++); // Delay
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_EXTI_Callback+0x1ca>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3301      	adds	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_GPIO_EXTI_Callback+0x224>)
 8001706:	4293      	cmp	r3, r2
 8001708:	ddf8      	ble.n	80016fc <HAL_GPIO_EXTI_Callback+0x1c4>
		int timeout;
		while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) & (timeout < 50000))
 800170a:	e002      	b.n	8001712 <HAL_GPIO_EXTI_Callback+0x1da>
		{
			timeout++;
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3301      	adds	r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
		while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) & (timeout < 50000))
 8001712:	2110      	movs	r1, #16
 8001714:	480f      	ldr	r0, [pc, #60]	; (8001754 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001716:	f001 fd53 	bl	80031c0 <HAL_GPIO_ReadPin>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2da      	uxtb	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f24c 314f 	movw	r1, #49999	; 0xc34f
 800172c:	428b      	cmp	r3, r1
 800172e:	bfd4      	ite	le
 8001730:	2301      	movle	r3, #1
 8001732:	2300      	movgt	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4013      	ands	r3, r2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1e6      	bne.n	800170c <HAL_GPIO_EXTI_Callback+0x1d4>
		}
		EXTI->PR |= GPIO_PIN_4;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_GPIO_EXTI_Callback+0x228>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_GPIO_EXTI_Callback+0x228>)
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	6153      	str	r3, [r2, #20]
	}
}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40020c00 	.word	0x40020c00
 8001758:	20000304 	.word	0x20000304
 800175c:	0001869f 	.word	0x0001869f
 8001760:	40013c00 	.word	0x40013c00

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001768:	f000 fe54 	bl	8002414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176c:	f000 f824 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001770:	f000 f8d6 	bl	8001920 <MX_GPIO_Init>
  MX_DMA_Init();
 8001774:	f000 f8b4 	bl	80018e0 <MX_DMA_Init>
  MX_SPI2_Init();
 8001778:	f000 f87c 	bl	8001874 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  N5110_Init();
 800177c:	f7ff f950 	bl	8000a20 <N5110_Init>
 start_game();
 8001780:	f000 fbe4 	bl	8001f4c <start_game>
  initGame();
 8001784:	f000 f98a 	bl	8001a9c <initGame>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(check == 0)
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <main+0x4c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1fb      	bne.n	8001788 <main+0x24>
		{
			N5110_Clear();
 8001790:	f7ff f9dc 	bl	8000b4c <N5110_Clear>
			egg(Egg.x, Egg.y);
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <main+0x50>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <main+0x50>)
 800179a:	6852      	ldr	r2, [r2, #4]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fc13 	bl	8001fca <egg>
			moveSnake();
 80017a4:	f000 fa1c 	bl	8001be0 <moveSnake>
			N5110_Update();
 80017a8:	f7ff f9a0 	bl	8000aec <N5110_Update>
		if(check == 0)
 80017ac:	e7ec      	b.n	8001788 <main+0x24>
 80017ae:	bf00      	nop
 80017b0:	20000090 	.word	0x20000090
 80017b4:	20000298 	.word	0x20000298

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	; 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	2230      	movs	r2, #48	; 0x30
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fd50 	bl	800426c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <SystemClock_Config+0xb4>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	4a21      	ldr	r2, [pc, #132]	; (800186c <SystemClock_Config+0xb4>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	6413      	str	r3, [r2, #64]	; 0x40
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <SystemClock_Config+0xb4>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <SystemClock_Config+0xb8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <SystemClock_Config+0xb8>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <SystemClock_Config+0xb8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001818:	2301      	movs	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800181c:	2310      	movs	r3, #16
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fd2d 	bl	8003288 <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001834:	f000 fb84 	bl	8001f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001838:	230f      	movs	r3, #15
 800183a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f001 ff90 	bl	8003778 <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800185e:	f000 fb6f 	bl	8001f40 <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	; 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_SPI2_Init+0x64>)
 800187a:	4a18      	ldr	r2, [pc, #96]	; (80018dc <MX_SPI2_Init+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <MX_SPI2_Init+0x64>)
 8001880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001884:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_SPI2_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_SPI2_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_SPI2_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_SPI2_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018a8:	2208      	movs	r2, #8
 80018aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_SPI2_Init+0x64>)
 80018c6:	f002 f8f3 	bl	8003ab0 <HAL_SPI_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018d0:	f000 fb36 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200002a8 	.word	0x200002a8
 80018dc:	40003800 	.word	0x40003800

080018e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_DMA_Init+0x3c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <MX_DMA_Init+0x3c>)
 80018f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_DMA_Init+0x3c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	200f      	movs	r0, #15
 8001908:	f000 fef5 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800190c:	200f      	movs	r0, #15
 800190e:	f000 ff0e 	bl	800272e <HAL_NVIC_EnableIRQ>

}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <MX_GPIO_Init+0x110>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a3c      	ldr	r2, [pc, #240]	; (8001a30 <MX_GPIO_Init+0x110>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <MX_GPIO_Init+0x110>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <MX_GPIO_Init+0x110>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a35      	ldr	r2, [pc, #212]	; (8001a30 <MX_GPIO_Init+0x110>)
 800195c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <MX_GPIO_Init+0x110>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <MX_GPIO_Init+0x110>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a2e      	ldr	r2, [pc, #184]	; (8001a30 <MX_GPIO_Init+0x110>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <MX_GPIO_Init+0x110>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_GPIO_Init+0x110>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <MX_GPIO_Init+0x110>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <MX_GPIO_Init+0x110>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RST_Pin|CE_Pin|DC_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 80019ac:	4821      	ldr	r0, [pc, #132]	; (8001a34 <MX_GPIO_Init+0x114>)
 80019ae:	f001 fc1f 	bl	80031f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin CE_Pin DC_Pin PD15 */
  GPIO_InitStruct.Pin = RST_Pin|CE_Pin|DC_Pin|GPIO_PIN_15;
 80019b2:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	481a      	ldr	r0, [pc, #104]	; (8001a34 <MX_GPIO_Init+0x114>)
 80019cc:	f001 fa5c 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin|UP_Pin|DOWN_Pin;
 80019d0:	231e      	movs	r3, #30
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_GPIO_Init+0x118>)
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <MX_GPIO_Init+0x114>)
 80019e4:	f001 fa50 	bl	8002e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	2007      	movs	r0, #7
 80019ee:	f000 fe82 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019f2:	2007      	movs	r0, #7
 80019f4:	f000 fe9b 	bl	800272e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2008      	movs	r0, #8
 80019fe:	f000 fe7a 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a02:	2008      	movs	r0, #8
 8001a04:	f000 fe93 	bl	800272e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2009      	movs	r0, #9
 8001a0e:	f000 fe72 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a12:	2009      	movs	r0, #9
 8001a14:	f000 fe8b 	bl	800272e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	200a      	movs	r0, #10
 8001a1e:	f000 fe6a 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a22:	200a      	movs	r0, #10
 8001a24:	f000 fe83 	bl	800272e <HAL_NVIC_EnableIRQ>

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	10110000 	.word	0x10110000

08001a3c <checkPoint>:

/* USER CODE BEGIN 4 */
bool checkPoint()
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
	for(int i = 0; i < snakeLength; i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	e017      	b.n	8001a78 <checkPoint+0x3c>
	{
		if(Egg.x == Snake[i].x && Egg.y == Snake[i].y)
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <checkPoint+0x54>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4911      	ldr	r1, [pc, #68]	; (8001a94 <checkPoint+0x58>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	440b      	add	r3, r1
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d10b      	bne.n	8001a72 <checkPoint+0x36>
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <checkPoint+0x54>)
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	490d      	ldr	r1, [pc, #52]	; (8001a94 <checkPoint+0x58>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	440b      	add	r3, r1
 8001a66:	3304      	adds	r3, #4
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d101      	bne.n	8001a72 <checkPoint+0x36>
			return false;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e008      	b.n	8001a84 <checkPoint+0x48>
	for(int i = 0; i < snakeLength; i++)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3301      	adds	r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <checkPoint+0x5c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbe2      	blt.n	8001a48 <checkPoint+0xc>
	}
	return true;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	20000298 	.word	0x20000298
 8001a94:	20000378 	.word	0x20000378
 8001a98:	20000300 	.word	0x20000300

08001a9c <initGame>:

void initGame()
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	snakeLength = 4;
 8001aa2:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <initGame+0xdc>)
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	601a      	str	r2, [r3, #0]
	score = 0;
 8001aa8:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <initGame+0xe0>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
	// tao snake
	for (int i = 1; i <= snakeLength; i++)
 8001aae:	2301      	movs	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	e018      	b.n	8001ae6 <initGame+0x4a>
	{
		Snake[snakeLength-i].x = i*3;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <initGame+0xdc>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	1ad1      	subs	r1, r2, r3
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	441a      	add	r2, r3
 8001ac4:	482e      	ldr	r0, [pc, #184]	; (8001b80 <initGame+0xe4>)
 8001ac6:	010b      	lsls	r3, r1, #4
 8001ac8:	4403      	add	r3, r0
 8001aca:	601a      	str	r2, [r3, #0]
		Snake[snakeLength-i].y = 6;
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <initGame+0xdc>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <initGame+0xe4>)
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	4413      	add	r3, r2
 8001ada:	3304      	adds	r3, #4
 8001adc:	2206      	movs	r2, #6
 8001ade:	601a      	str	r2, [r3, #0]
	for (int i = 1; i <= snakeLength; i++)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <initGame+0xdc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dde1      	ble.n	8001ab4 <initGame+0x18>
	}
	Snake[0].x0 = Snake[0].x;
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <initGame+0xe4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <initGame+0xe4>)
 8001af6:	6093      	str	r3, [r2, #8]
	Snake[0].y0 = Snake[0].y;
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <initGame+0xe4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <initGame+0xe4>)
 8001afe:	60d3      	str	r3, [r2, #12]

	// tao egg
	do {
			Egg.x = (rand()%23 + 1) *3;
 8001b00:	f002 fbbc 	bl	800427c <rand>
 8001b04:	4601      	mov	r1, r0
 8001b06:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <initGame+0xe8>)
 8001b08:	fb83 2301 	smull	r2, r3, r3, r1
 8001b0c:	440b      	add	r3, r1
 8001b0e:	111a      	asrs	r2, r3, #4
 8001b10:	17cb      	asrs	r3, r1, #31
 8001b12:	1ad2      	subs	r2, r2, r3
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	1aca      	subs	r2, r1, r3
 8001b20:	3201      	adds	r2, #1
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <initGame+0xec>)
 8001b2a:	6013      	str	r3, [r2, #0]
			Egg.y = (rand()%15 + 1) *3;
 8001b2c:	f002 fba6 	bl	800427c <rand>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <initGame+0xf0>)
 8001b34:	fb83 1302 	smull	r1, r3, r3, r2
 8001b38:	4413      	add	r3, r2
 8001b3a:	10d9      	asrs	r1, r3, #3
 8001b3c:	17d3      	asrs	r3, r2, #31
 8001b3e:	1ac9      	subs	r1, r1, r3
 8001b40:	460b      	mov	r3, r1
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	1a5b      	subs	r3, r3, r1
 8001b46:	1ad1      	subs	r1, r2, r3
 8001b48:	1c4a      	adds	r2, r1, #1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <initGame+0xec>)
 8001b52:	6053      	str	r3, [r2, #4]
	}while(checkPoint() == false);
 8001b54:	f7ff ff72 	bl	8001a3c <checkPoint>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f083 0301 	eor.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1cd      	bne.n	8001b00 <initGame+0x64>

	// Huong di
	direction.x = 3;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <initGame+0xf4>)
 8001b66:	2203      	movs	r2, #3
 8001b68:	601a      	str	r2, [r3, #0]
	direction.y = 0;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <initGame+0xf4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000300 	.word	0x20000300
 8001b7c:	20000314 	.word	0x20000314
 8001b80:	20000378 	.word	0x20000378
 8001b84:	b21642c9 	.word	0xb21642c9
 8001b88:	20000298 	.word	0x20000298
 8001b8c:	88888889 	.word	0x88888889
 8001b90:	20000304 	.word	0x20000304

08001b94 <drawSnake>:

void drawSnake()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	for (int i = 0; i < snakeLength; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e011      	b.n	8001bc4 <drawSnake+0x30>
	{
		snake(Snake[i].x, Snake[i].y);
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <drawSnake+0x44>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	4413      	add	r3, r2
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	490b      	ldr	r1, [pc, #44]	; (8001bd8 <drawSnake+0x44>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f000 f9f3 	bl	8001fa4 <snake>
	for (int i = 0; i < snakeLength; i++)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <drawSnake+0x48>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbe8      	blt.n	8001ba0 <drawSnake+0xc>
	}
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000378 	.word	0x20000378
 8001bdc:	20000300 	.word	0x20000300

08001be0 <moveSnake>:

void moveSnake()
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
	for (int i = 0; i < snakeLength; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e0b6      	b.n	8001d5a <moveSnake+0x17a>
	{
		if(i == 0)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <moveSnake+0x40>
		{
			Snake[0].x0 = Snake[0].x;
 8001bf2:	4b94      	ldr	r3, [pc, #592]	; (8001e44 <moveSnake+0x264>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a93      	ldr	r2, [pc, #588]	; (8001e44 <moveSnake+0x264>)
 8001bf8:	6093      	str	r3, [r2, #8]
			Snake[0].y0 = Snake[0].y;
 8001bfa:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <moveSnake+0x264>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a91      	ldr	r2, [pc, #580]	; (8001e44 <moveSnake+0x264>)
 8001c00:	60d3      	str	r3, [r2, #12]
			Snake[0].x += direction.x;
 8001c02:	4b90      	ldr	r3, [pc, #576]	; (8001e44 <moveSnake+0x264>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b90      	ldr	r3, [pc, #576]	; (8001e48 <moveSnake+0x268>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a8d      	ldr	r2, [pc, #564]	; (8001e44 <moveSnake+0x264>)
 8001c0e:	6013      	str	r3, [r2, #0]
			Snake[0].y += direction.y;
 8001c10:	4b8c      	ldr	r3, [pc, #560]	; (8001e44 <moveSnake+0x264>)
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4b8c      	ldr	r3, [pc, #560]	; (8001e48 <moveSnake+0x268>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a8a      	ldr	r2, [pc, #552]	; (8001e44 <moveSnake+0x264>)
 8001c1c:	6053      	str	r3, [r2, #4]
 8001c1e:	e02f      	b.n	8001c80 <moveSnake+0xa0>
		}
		else
		{
			Snake[i].x0 = Snake[i].x;
 8001c20:	4a88      	ldr	r2, [pc, #544]	; (8001e44 <moveSnake+0x264>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4413      	add	r3, r2
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4986      	ldr	r1, [pc, #536]	; (8001e44 <moveSnake+0x264>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	440b      	add	r3, r1
 8001c32:	3308      	adds	r3, #8
 8001c34:	601a      	str	r2, [r3, #0]
			Snake[i].y0 = Snake[i].y;
 8001c36:	4a83      	ldr	r2, [pc, #524]	; (8001e44 <moveSnake+0x264>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4980      	ldr	r1, [pc, #512]	; (8001e44 <moveSnake+0x264>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	440b      	add	r3, r1
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	601a      	str	r2, [r3, #0]
			Snake[i].x = Snake[i-1].x0;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	4a7c      	ldr	r2, [pc, #496]	; (8001e44 <moveSnake+0x264>)
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	4413      	add	r3, r2
 8001c58:	3308      	adds	r3, #8
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4979      	ldr	r1, [pc, #484]	; (8001e44 <moveSnake+0x264>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	440b      	add	r3, r1
 8001c64:	601a      	str	r2, [r3, #0]
			Snake[i].y = Snake[i-1].y0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	4a76      	ldr	r2, [pc, #472]	; (8001e44 <moveSnake+0x264>)
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4413      	add	r3, r2
 8001c70:	330c      	adds	r3, #12
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4973      	ldr	r1, [pc, #460]	; (8001e44 <moveSnake+0x264>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	601a      	str	r2, [r3, #0]
		}

		if(Snake[i].x >= 84) Snake[i].x -= 84;
 8001c80:	4a70      	ldr	r2, [pc, #448]	; (8001e44 <moveSnake+0x264>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	4413      	add	r3, r2
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b53      	cmp	r3, #83	; 0x53
 8001c8c:	dd0b      	ble.n	8001ca6 <moveSnake+0xc6>
 8001c8e:	4a6d      	ldr	r2, [pc, #436]	; (8001e44 <moveSnake+0x264>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1a3 0254 	sub.w	r2, r3, #84	; 0x54
 8001c9c:	4969      	ldr	r1, [pc, #420]	; (8001e44 <moveSnake+0x264>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	440b      	add	r3, r1
 8001ca4:	601a      	str	r2, [r3, #0]
		if(Snake[i].x <= 0) Snake[i].x += 84;
 8001ca6:	4a67      	ldr	r2, [pc, #412]	; (8001e44 <moveSnake+0x264>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4413      	add	r3, r2
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	dc0b      	bgt.n	8001ccc <moveSnake+0xec>
 8001cb4:	4a63      	ldr	r2, [pc, #396]	; (8001e44 <moveSnake+0x264>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001cc2:	4960      	ldr	r1, [pc, #384]	; (8001e44 <moveSnake+0x264>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	440b      	add	r3, r1
 8001cca:	601a      	str	r2, [r3, #0]
		if(Snake[i].y >= 48) Snake[i].y -= 48;
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <moveSnake+0x264>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b2f      	cmp	r3, #47	; 0x2f
 8001cda:	dd0d      	ble.n	8001cf8 <moveSnake+0x118>
 8001cdc:	4a59      	ldr	r2, [pc, #356]	; (8001e44 <moveSnake+0x264>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001cec:	4955      	ldr	r1, [pc, #340]	; (8001e44 <moveSnake+0x264>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	601a      	str	r2, [r3, #0]
		if(Snake[i].y <= 0) Snake[i].y += 48;
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <moveSnake+0x264>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	dc0d      	bgt.n	8001d24 <moveSnake+0x144>
 8001d08:	4a4e      	ldr	r2, [pc, #312]	; (8001e44 <moveSnake+0x264>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	4413      	add	r3, r2
 8001d10:	3304      	adds	r3, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001d18:	494a      	ldr	r1, [pc, #296]	; (8001e44 <moveSnake+0x264>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	440b      	add	r3, r1
 8001d20:	3304      	adds	r3, #4
 8001d22:	601a      	str	r2, [r3, #0]

		if(i != 0 && Snake[0].x == Snake[i].x && Snake[0].y == Snake[i].y)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d014      	beq.n	8001d54 <moveSnake+0x174>
 8001d2a:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <moveSnake+0x264>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4945      	ldr	r1, [pc, #276]	; (8001e44 <moveSnake+0x264>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	440b      	add	r3, r1
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d10b      	bne.n	8001d54 <moveSnake+0x174>
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <moveSnake+0x264>)
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4940      	ldr	r1, [pc, #256]	; (8001e44 <moveSnake+0x264>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	440b      	add	r3, r1
 8001d48:	3304      	adds	r3, #4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d101      	bne.n	8001d54 <moveSnake+0x174>
			gameOver();
 8001d50:	f000 f886 	bl	8001e60 <gameOver>
	for (int i = 0; i < snakeLength; i++)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3301      	adds	r3, #1
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <moveSnake+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f6ff af43 	blt.w	8001bec <moveSnake+0xc>
	}
	HAL_Delay(200);
 8001d66:	20c8      	movs	r0, #200	; 0xc8
 8001d68:	f000 fbc6 	bl	80024f8 <HAL_Delay>

	if(Snake[0].x == Egg.x && Snake[0].y == Egg.y)
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <moveSnake+0x264>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <moveSnake+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d15e      	bne.n	8001e36 <moveSnake+0x256>
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <moveSnake+0x264>)
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <moveSnake+0x270>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d158      	bne.n	8001e36 <moveSnake+0x256>
	{
		Snake[snakeLength].x = Snake[snakeLength-1].x0;
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <moveSnake+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <moveSnake+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	492d      	ldr	r1, [pc, #180]	; (8001e44 <moveSnake+0x264>)
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	440a      	add	r2, r1
 8001d94:	3208      	adds	r2, #8
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	492a      	ldr	r1, [pc, #168]	; (8001e44 <moveSnake+0x264>)
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	440b      	add	r3, r1
 8001d9e:	601a      	str	r2, [r3, #0]
		Snake[snakeLength].y = Snake[snakeLength-1].y0;
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <moveSnake+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	1e5a      	subs	r2, r3, #1
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <moveSnake+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4926      	ldr	r1, [pc, #152]	; (8001e44 <moveSnake+0x264>)
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	440a      	add	r2, r1
 8001db0:	320c      	adds	r2, #12
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	4923      	ldr	r1, [pc, #140]	; (8001e44 <moveSnake+0x264>)
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	440b      	add	r3, r1
 8001dba:	3304      	adds	r3, #4
 8001dbc:	601a      	str	r2, [r3, #0]
		snakeLength++;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <moveSnake+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <moveSnake+0x26c>)
 8001dc6:	6013      	str	r3, [r2, #0]
		score++;
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <moveSnake+0x274>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <moveSnake+0x274>)
 8001dd0:	6013      	str	r3, [r2, #0]
		do {
			Egg.x = (rand()%23 + 1) *3;
 8001dd2:	f002 fa53 	bl	800427c <rand>
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <moveSnake+0x278>)
 8001dda:	fb83 2301 	smull	r2, r3, r3, r1
 8001dde:	440b      	add	r3, r1
 8001de0:	111a      	asrs	r2, r3, #4
 8001de2:	17cb      	asrs	r3, r1, #31
 8001de4:	1ad2      	subs	r2, r2, r3
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	1a9b      	subs	r3, r3, r2
 8001df0:	1aca      	subs	r2, r1, r3
 8001df2:	3201      	adds	r2, #1
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <moveSnake+0x270>)
 8001dfc:	6013      	str	r3, [r2, #0]
			Egg.y = (rand()%15 + 1) *3;
 8001dfe:	f002 fa3d 	bl	800427c <rand>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <moveSnake+0x27c>)
 8001e06:	fb83 1302 	smull	r1, r3, r3, r2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	10d9      	asrs	r1, r3, #3
 8001e0e:	17d3      	asrs	r3, r2, #31
 8001e10:	1ac9      	subs	r1, r1, r3
 8001e12:	460b      	mov	r3, r1
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	1a5b      	subs	r3, r3, r1
 8001e18:	1ad1      	subs	r1, r2, r3
 8001e1a:	1c4a      	adds	r2, r1, #1
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <moveSnake+0x270>)
 8001e24:	6053      	str	r3, [r2, #4]
		}while(checkPoint() == false);
 8001e26:	f7ff fe09 	bl	8001a3c <checkPoint>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1cd      	bne.n	8001dd2 <moveSnake+0x1f2>
	}
	drawSnake();
 8001e36:	f7ff fead 	bl	8001b94 <drawSnake>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000378 	.word	0x20000378
 8001e48:	20000304 	.word	0x20000304
 8001e4c:	20000300 	.word	0x20000300
 8001e50:	20000298 	.word	0x20000298
 8001e54:	20000314 	.word	0x20000314
 8001e58:	b21642c9 	.word	0xb21642c9
 8001e5c:	88888889 	.word	0x88888889

08001e60 <gameOver>:

void gameOver()
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
	check = 1;
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <gameOver+0xcc>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
	char *str_core;
	int div = score%10;
 8001e6c:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <gameOver+0xd0>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <gameOver+0xd4>)
 8001e72:	fb83 1302 	smull	r1, r3, r3, r2
 8001e76:	1099      	asrs	r1, r3, #2
 8001e78:	17d3      	asrs	r3, r2, #31
 8001e7a:	1ac9      	subs	r1, r1, r3
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	60bb      	str	r3, [r7, #8]
	str_core[0] = div + 0x30;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3330      	adds	r3, #48	; 0x30
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	701a      	strb	r2, [r3, #0]
	int i=1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
	while(score/10)
 8001e98:	e022      	b.n	8001ee0 <gameOver+0x80>
	{
		score = score/10;
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <gameOver+0xd0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <gameOver+0xd4>)
 8001ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ea4:	1092      	asrs	r2, r2, #2
 8001ea6:	17db      	asrs	r3, r3, #31
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <gameOver+0xd0>)
 8001eac:	6013      	str	r3, [r2, #0]
		div = score%10;
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <gameOver+0xd0>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <gameOver+0xd4>)
 8001eb4:	fb83 1302 	smull	r1, r3, r3, r2
 8001eb8:	1099      	asrs	r1, r3, #2
 8001eba:	17d3      	asrs	r3, r2, #31
 8001ebc:	1ac9      	subs	r1, r1, r3
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	60bb      	str	r3, [r7, #8]
		str_core[i] = div + 0x30;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3230      	adds	r2, #48	; 0x30
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
		i++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3301      	adds	r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
	while(score/10)
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <gameOver+0xd0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3309      	adds	r3, #9
 8001ee6:	2b12      	cmp	r3, #18
 8001ee8:	d8d7      	bhi.n	8001e9a <gameOver+0x3a>
	}
	N5110_Clear();
 8001eea:	f7fe fe2f 	bl	8000b4c <N5110_Clear>
	N5110_SetFont(SmallFont);
 8001eee:	4812      	ldr	r0, [pc, #72]	; (8001f38 <gameOver+0xd8>)
 8001ef0:	f7fe fe98 	bl	8000c24 <N5110_SetFont>
	N5110_PrintStr(N5110_MAX_WIDTH/2-(4.5*6), 12, "Game Over", true);
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <gameOver+0xdc>)
 8001ef8:	210c      	movs	r1, #12
 8001efa:	200f      	movs	r0, #15
 8001efc:	f7fe ffba 	bl	8000e74 <N5110_PrintStr>
	N5110_PrintStr(N5110_MAX_WIDTH/2-(1*6), 25, str_core,true);
 8001f00:	2301      	movs	r3, #1
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	2119      	movs	r1, #25
 8001f06:	2024      	movs	r0, #36	; 0x24
 8001f08:	f7fe ffb4 	bl	8000e74 <N5110_PrintStr>
	N5110_Update();
 8001f0c:	f7fe fdee 	bl	8000aec <N5110_Update>
	HAL_Delay(20000);
 8001f10:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001f14:	f000 faf0 	bl	80024f8 <HAL_Delay>
	initGame();
 8001f18:	f7ff fdc0 	bl	8001a9c <initGame>
	check = 0;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <gameOver+0xcc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000090 	.word	0x20000090
 8001f30:	20000314 	.word	0x20000314
 8001f34:	66666667 	.word	0x66666667
 8001f38:	080052bc 	.word	0x080052bc
 8001f3c:	08005298 	.word	0x08005298

08001f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
}
 8001f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <Error_Handler+0x8>
	...

08001f4c <start_game>:
#include"snake_lib.h"
void start_game()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    N5110_Clear();
 8001f50:	f7fe fdfc 	bl	8000b4c <N5110_Clear>
    N5110_SetFont(SmallFont);
 8001f54:	4810      	ldr	r0, [pc, #64]	; (8001f98 <start_game+0x4c>)
 8001f56:	f7fe fe65 	bl	8000c24 <N5110_SetFont>
    N5110_PrintStr(N5110_MAX_WIDTH/2-(4.5*6), N5110_MAX_HEIGHT/2 - 4, "NOKIA5110", true);
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <start_game+0x50>)
 8001f5e:	2114      	movs	r1, #20
 8001f60:	200f      	movs	r0, #15
 8001f62:	f7fe ff87 	bl	8000e74 <N5110_PrintStr>
    N5110_Update();
 8001f66:	f7fe fdc1 	bl	8000aec <N5110_Update>
	HAL_Delay(2000);
 8001f6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f6e:	f000 fac3 	bl	80024f8 <HAL_Delay>

    N5110_Clear();
 8001f72:	f7fe fdeb 	bl	8000b4c <N5110_Clear>
    N5110_SetFont(SmallFont);
 8001f76:	4808      	ldr	r0, [pc, #32]	; (8001f98 <start_game+0x4c>)
 8001f78:	f7fe fe54 	bl	8000c24 <N5110_SetFont>
    N5110_PrintStr(N5110_MAX_WIDTH/2-(4.5*6), N5110_MAX_HEIGHT/2 - 4, "GAME SNAKE", true);
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <start_game+0x54>)
 8001f80:	2114      	movs	r1, #20
 8001f82:	200f      	movs	r0, #15
 8001f84:	f7fe ff76 	bl	8000e74 <N5110_PrintStr>
    N5110_Update();
 8001f88:	f7fe fdb0 	bl	8000aec <N5110_Update>
	HAL_Delay(2000);
 8001f8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f90:	f000 fab2 	bl	80024f8 <HAL_Delay>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	080052bc 	.word	0x080052bc
 8001f9c:	080052a4 	.word	0x080052a4
 8001fa0:	080052b0 	.word	0x080052b0

08001fa4 <snake>:

void snake(int x, int y)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
	N5110_DrawCircle(x,y,1,true,false);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	b2d8      	uxtb	r0, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2d9      	uxtb	r1, r3
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f7ff f9ac 	bl	800131a <N5110_DrawCircle>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <egg>:

void egg(int x, int y)
{
 8001fca:	b590      	push	{r4, r7, lr}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af02      	add	r7, sp, #8
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
	N5110_DrawRect(x-1,y-1,x+1,y+1,true,true);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b2d8      	uxtb	r0, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b2d9      	uxtb	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2401      	movs	r4, #1
 8001ff6:	9401      	str	r4, [sp, #4]
 8001ff8:	2401      	movs	r4, #1
 8001ffa:	9400      	str	r4, [sp, #0]
 8001ffc:	f7ff f91c 	bl	8001238 <N5110_DrawRect>
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bd90      	pop	{r4, r7, pc}

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_MspInit+0x4c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_MspInit+0x4c>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_MspInit+0x4c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a34      	ldr	r2, [pc, #208]	; (8002148 <HAL_SPI_MspInit+0xf0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d161      	bne.n	800213e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_SPI_MspInit+0xf4>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_SPI_MspInit+0xf4>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_SPI_MspInit+0xf4>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_SPI_MspInit+0xf4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a2b      	ldr	r2, [pc, #172]	; (800214c <HAL_SPI_MspInit+0xf4>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <HAL_SPI_MspInit+0xf4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80020b2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c4:	2305      	movs	r3, #5
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4820      	ldr	r0, [pc, #128]	; (8002150 <HAL_SPI_MspInit+0xf8>)
 80020d0:	f000 feda 	bl	8002e88 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 80020d6:	4a20      	ldr	r2, [pc, #128]	; (8002158 <HAL_SPI_MspInit+0x100>)
 80020d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 80020ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002112:	4810      	ldr	r0, [pc, #64]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 8002114:	f000 fb26 	bl	8002764 <HAL_DMA_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800211e:	f7ff ff0f 	bl	8001f40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 8002126:	649a      	str	r2, [r3, #72]	; 0x48
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_SPI_MspInit+0xfc>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2024      	movs	r0, #36	; 0x24
 8002134:	f000 fadf 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002138:	2024      	movs	r0, #36	; 0x24
 800213a:	f000 faf8 	bl	800272e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	; 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40003800 	.word	0x40003800
 800214c:	40023800 	.word	0x40023800
 8002150:	40020400 	.word	0x40020400
 8002154:	20000318 	.word	0x20000318
 8002158:	40026070 	.word	0x40026070

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <NMI_Handler+0x4>

08002162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a8:	f000 f986 	bl	80024b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80021b4:	2002      	movs	r0, #2
 80021b6:	f001 f84f 	bl	8003258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}

080021be <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80021c2:	2004      	movs	r0, #4
 80021c4:	f001 f848 	bl	8003258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021d0:	2008      	movs	r0, #8
 80021d2:	f001 f841 	bl	8003258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}

080021da <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021de:	2010      	movs	r0, #16
 80021e0:	f001 f83a 	bl	8003258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA1_Stream4_IRQHandler+0x10>)
 80021ee:	f000 fbe1 	bl	80029b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000318 	.word	0x20000318

080021fc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <SPI2_IRQHandler+0x10>)
 8002202:	f001 fd95 	bl	8003d30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200002a8 	.word	0x200002a8

08002210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
	return 1;
 8002214:	2301      	movs	r3, #1
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_kill>:

int _kill(int pid, int sig)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800222a:	f001 fff5 	bl	8004218 <__errno>
 800222e:	4603      	mov	r3, r0
 8002230:	2216      	movs	r2, #22
 8002232:	601a      	str	r2, [r3, #0]
	return -1;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_exit>:

void _exit (int status)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ffe7 	bl	8002220 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002252:	e7fe      	b.n	8002252 <_exit+0x12>

08002254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e00a      	b.n	800227c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002266:	f3af 8000 	nop.w
 800226a:	4601      	mov	r1, r0
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	b2ca      	uxtb	r2, r1
 8002274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3301      	adds	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	dbf0      	blt.n	8002266 <_read+0x12>
	}

return len;
 8002284:	687b      	ldr	r3, [r7, #4]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e009      	b.n	80022b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	60ba      	str	r2, [r7, #8]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbf1      	blt.n	80022a0 <_write+0x12>
	}
	return len;
 80022bc:	687b      	ldr	r3, [r7, #4]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_close>:

int _close(int file)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
	return -1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ee:	605a      	str	r2, [r3, #4]
	return 0;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <_isatty>:

int _isatty(int file)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
	return 1;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
	return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <_sbrk+0x5c>)
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <_sbrk+0x60>)
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <_sbrk+0x64>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <_sbrk+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d207      	bcs.n	8002370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002360:	f001 ff5a 	bl	8004218 <__errno>
 8002364:	4603      	mov	r3, r0
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e009      	b.n	8002384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <_sbrk+0x64>)
 8002380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20020000 	.word	0x20020000
 8002390:	00000400 	.word	0x00000400
 8002394:	20000094 	.word	0x20000094
 8002398:	200009d0 	.word	0x200009d0

0800239c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <SystemInit+0x20>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <SystemInit+0x20>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023c6:	490e      	ldr	r1, [pc, #56]	; (8002400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023dc:	4c0b      	ldr	r4, [pc, #44]	; (800240c <LoopFillZerobss+0x26>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023ea:	f7ff ffd7 	bl	800239c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ee:	f001 ff19 	bl	8004224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f2:	f7ff f9b7 	bl	8001764 <main>
  bx  lr    
 80023f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002404:	08005670 	.word	0x08005670
  ldr r2, =_sbss
 8002408:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800240c:	200009cc 	.word	0x200009cc

08002410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC_IRQHandler>
	...

08002414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_Init+0x40>)
 800241e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_Init+0x40>)
 800242a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_Init+0x40>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 f94f 	bl	80026e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f808 	bl	8002458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002448:	f7ff fdde 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00

08002458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x54>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x58>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f967 	bl	800274a <HAL_SYSTICK_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e00e      	b.n	80024a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d80a      	bhi.n	80024a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248c:	2200      	movs	r2, #0
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f000 f92f 	bl	80026f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002498:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <HAL_InitTick+0x5c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000004 	.word	0x20000004
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	20000008 	.word	0x20000008

080024b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x20>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_IncTick+0x24>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	2000000c 	.word	0x2000000c
 80024dc:	200009b8 	.word	0x200009b8

080024e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_GetTick+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	200009b8 	.word	0x200009b8

080024f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff ffee 	bl	80024e0 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d005      	beq.n	800251e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_Delay+0x44>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251e:	bf00      	nop
 8002520:	f7ff ffde 	bl	80024e0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f7      	bhi.n	8002520 <HAL_Delay+0x28>
  {
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000000c 	.word	0x2000000c

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800256c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4907      	ldr	r1, [pc, #28]	; (80025dc <__NVIC_EnableIRQ+0x38>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	; (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ac:	d301      	bcc.n	80026b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00f      	b.n	80026d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b2:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <SysTick_Config+0x40>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ba:	210f      	movs	r1, #15
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f7ff ff8e 	bl	80025e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <SysTick_Config+0x40>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <SysTick_Config+0x40>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ff29 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002708:	f7ff ff3e 	bl	8002588 <__NVIC_GetPriorityGrouping>
 800270c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f7ff ff8e 	bl	8002634 <NVIC_EncodePriority>
 8002718:	4602      	mov	r2, r0
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff5d 	bl	80025e0 <__NVIC_SetPriority>
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff31 	bl	80025a4 <__NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffa2 	bl	800269c <SysTick_Config>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff feb6 	bl	80024e0 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e099      	b.n	80028b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a0:	e00f      	b.n	80027c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027a2:	f7ff fe9d 	bl	80024e0 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d908      	bls.n	80027c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2203      	movs	r2, #3
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e078      	b.n	80028b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e8      	bne.n	80027a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_DMA_Init+0x158>)
 80027dc:	4013      	ands	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	2b04      	cmp	r3, #4
 800281a:	d107      	bne.n	800282c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	4313      	orrs	r3, r2
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f023 0307 	bic.w	r3, r3, #7
 8002842:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	2b04      	cmp	r3, #4
 8002854:	d117      	bne.n	8002886 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00e      	beq.n	8002886 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fa91 	bl	8002d90 <DMA_CheckFifoParam>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002882:	2301      	movs	r3, #1
 8002884:	e016      	b.n	80028b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa48 	bl	8002d24 <DMA_CalcBaseAndBitshift>
 8002894:	4603      	mov	r3, r0
 8002896:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	223f      	movs	r2, #63	; 0x3f
 800289e:	409a      	lsls	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	f010803f 	.word	0xf010803f

080028c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_DMA_Start_IT+0x26>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e040      	b.n	8002968 <HAL_DMA_Start_IT+0xa8>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d12f      	bne.n	800295a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2202      	movs	r2, #2
 80028fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f9da 	bl	8002cc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	223f      	movs	r2, #63	; 0x3f
 800291a:	409a      	lsls	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0216 	orr.w	r2, r2, #22
 800292e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0208 	orr.w	r2, r2, #8
 8002946:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e005      	b.n	8002966 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002962:	2302      	movs	r3, #2
 8002964:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002966:	7dfb      	ldrb	r3, [r7, #23]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d004      	beq.n	800298e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e00c      	b.n	80029a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2205      	movs	r2, #5
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029c0:	4b92      	ldr	r3, [pc, #584]	; (8002c0c <HAL_DMA_IRQHandler+0x258>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a92      	ldr	r2, [pc, #584]	; (8002c10 <HAL_DMA_IRQHandler+0x25c>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0a9b      	lsrs	r3, r3, #10
 80029cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	2208      	movs	r2, #8
 80029e0:	409a      	lsls	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01a      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0204 	bic.w	r2, r2, #4
 8002a06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a18:	f043 0201 	orr.w	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	2201      	movs	r2, #1
 8002a26:	409a      	lsls	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	2201      	movs	r2, #1
 8002a44:	409a      	lsls	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0202 	orr.w	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d012      	beq.n	8002a8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00b      	beq.n	8002a8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	2204      	movs	r2, #4
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	f043 0204 	orr.w	r2, r3, #4
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	2210      	movs	r2, #16
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d043      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d03c      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	2210      	movs	r2, #16
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d018      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d108      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d024      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
 8002ae2:	e01f      	b.n	8002b24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01b      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
 8002af4:	e016      	b.n	8002b24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0208 	bic.w	r2, r2, #8
 8002b12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	2220      	movs	r2, #32
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 808e 	beq.w	8002c52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8086 	beq.w	8002c52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d136      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0216 	bic.w	r2, r2, #22
 8002b6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_DMA_IRQHandler+0x1da>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0208 	bic.w	r2, r2, #8
 8002b9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	223f      	movs	r2, #63	; 0x3f
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d07d      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
        }
        return;
 8002bca:	e078      	b.n	8002cbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01c      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d108      	bne.n	8002bfa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d030      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
 8002bf8:	e02b      	b.n	8002c52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d027      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
 8002c0a:	e022      	b.n	8002c52 <HAL_DMA_IRQHandler+0x29e>
 8002c0c:	20000004 	.word	0x20000004
 8002c10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0210 	bic.w	r2, r2, #16
 8002c30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d032      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d022      	beq.n	8002cac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2205      	movs	r2, #5
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d307      	bcc.n	8002c9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f2      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x2ca>
 8002c98:	e000      	b.n	8002c9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c9a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
 8002cbc:	e000      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cbe:	bf00      	nop
    }
  }
}
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop

08002cc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d108      	bne.n	8002d08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d06:	e007      	b.n	8002d18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	3b10      	subs	r3, #16
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <DMA_CalcBaseAndBitshift+0x64>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <DMA_CalcBaseAndBitshift+0x68>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d909      	bls.n	8002d66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	1d1a      	adds	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	659a      	str	r2, [r3, #88]	; 0x58
 8002d64:	e007      	b.n	8002d76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	aaaaaaab 	.word	0xaaaaaaab
 8002d8c:	0800550c 	.word	0x0800550c

08002d90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11f      	bne.n	8002dea <DMA_CheckFifoParam+0x5a>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d856      	bhi.n	8002e5e <DMA_CheckFifoParam+0xce>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <DMA_CheckFifoParam+0x28>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002ddb 	.word	0x08002ddb
 8002dc0:	08002dc9 	.word	0x08002dc9
 8002dc4:	08002e5f 	.word	0x08002e5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d046      	beq.n	8002e62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e043      	b.n	8002e62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002de2:	d140      	bne.n	8002e66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de8:	e03d      	b.n	8002e66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df2:	d121      	bne.n	8002e38 <DMA_CheckFifoParam+0xa8>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d837      	bhi.n	8002e6a <DMA_CheckFifoParam+0xda>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <DMA_CheckFifoParam+0x70>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e17 	.word	0x08002e17
 8002e08:	08002e11 	.word	0x08002e11
 8002e0c:	08002e29 	.word	0x08002e29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      break;
 8002e14:	e030      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d025      	beq.n	8002e6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e26:	e022      	b.n	8002e6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e30:	d11f      	bne.n	8002e72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e36:	e01c      	b.n	8002e72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d903      	bls.n	8002e46 <DMA_CheckFifoParam+0xb6>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d003      	beq.n	8002e4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e44:	e018      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4a:	e015      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00e      	beq.n	8002e76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e00b      	b.n	8002e76 <DMA_CheckFifoParam+0xe6>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e00a      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e62:	bf00      	nop
 8002e64:	e008      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e66:	bf00      	nop
 8002e68:	e006      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e004      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e002      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <DMA_CheckFifoParam+0xe8>
      break;
 8002e76:	bf00      	nop
    }
  } 
  
  return status; 
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop

08002e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e16b      	b.n	800317c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f040 815a 	bne.w	8003176 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d005      	beq.n	8002eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d130      	bne.n	8002f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f10:	2201      	movs	r2, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 0201 	and.w	r2, r3, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d017      	beq.n	8002f78 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d123      	bne.n	8002fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	08da      	lsrs	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3208      	adds	r2, #8
 8002f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	220f      	movs	r2, #15
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	08da      	lsrs	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3208      	adds	r2, #8
 8002fc6:	69b9      	ldr	r1, [r7, #24]
 8002fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0203 	and.w	r2, r3, #3
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80b4 	beq.w	8003176 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b60      	ldr	r3, [pc, #384]	; (8003194 <HAL_GPIO_Init+0x30c>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a5f      	ldr	r2, [pc, #380]	; (8003194 <HAL_GPIO_Init+0x30c>)
 8003018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b5d      	ldr	r3, [pc, #372]	; (8003194 <HAL_GPIO_Init+0x30c>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800302a:	4a5b      	ldr	r2, [pc, #364]	; (8003198 <HAL_GPIO_Init+0x310>)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	220f      	movs	r2, #15
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a52      	ldr	r2, [pc, #328]	; (800319c <HAL_GPIO_Init+0x314>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d02b      	beq.n	80030ae <HAL_GPIO_Init+0x226>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a51      	ldr	r2, [pc, #324]	; (80031a0 <HAL_GPIO_Init+0x318>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d025      	beq.n	80030aa <HAL_GPIO_Init+0x222>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a50      	ldr	r2, [pc, #320]	; (80031a4 <HAL_GPIO_Init+0x31c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01f      	beq.n	80030a6 <HAL_GPIO_Init+0x21e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4f      	ldr	r2, [pc, #316]	; (80031a8 <HAL_GPIO_Init+0x320>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d019      	beq.n	80030a2 <HAL_GPIO_Init+0x21a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <HAL_GPIO_Init+0x324>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0x216>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4d      	ldr	r2, [pc, #308]	; (80031b0 <HAL_GPIO_Init+0x328>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00d      	beq.n	800309a <HAL_GPIO_Init+0x212>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4c      	ldr	r2, [pc, #304]	; (80031b4 <HAL_GPIO_Init+0x32c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <HAL_GPIO_Init+0x20e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4b      	ldr	r2, [pc, #300]	; (80031b8 <HAL_GPIO_Init+0x330>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_GPIO_Init+0x20a>
 800308e:	2307      	movs	r3, #7
 8003090:	e00e      	b.n	80030b0 <HAL_GPIO_Init+0x228>
 8003092:	2308      	movs	r3, #8
 8003094:	e00c      	b.n	80030b0 <HAL_GPIO_Init+0x228>
 8003096:	2306      	movs	r3, #6
 8003098:	e00a      	b.n	80030b0 <HAL_GPIO_Init+0x228>
 800309a:	2305      	movs	r3, #5
 800309c:	e008      	b.n	80030b0 <HAL_GPIO_Init+0x228>
 800309e:	2304      	movs	r3, #4
 80030a0:	e006      	b.n	80030b0 <HAL_GPIO_Init+0x228>
 80030a2:	2303      	movs	r3, #3
 80030a4:	e004      	b.n	80030b0 <HAL_GPIO_Init+0x228>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e002      	b.n	80030b0 <HAL_GPIO_Init+0x228>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_GPIO_Init+0x228>
 80030ae:	2300      	movs	r3, #0
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	f002 0203 	and.w	r2, r2, #3
 80030b6:	0092      	lsls	r2, r2, #2
 80030b8:	4093      	lsls	r3, r2
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030c0:	4935      	ldr	r1, [pc, #212]	; (8003198 <HAL_GPIO_Init+0x310>)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	089b      	lsrs	r3, r3, #2
 80030c6:	3302      	adds	r3, #2
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <HAL_GPIO_Init+0x334>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f2:	4a32      	ldr	r2, [pc, #200]	; (80031bc <HAL_GPIO_Init+0x334>)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030f8:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_GPIO_Init+0x334>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_GPIO_Init+0x334>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003122:	4b26      	ldr	r3, [pc, #152]	; (80031bc <HAL_GPIO_Init+0x334>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <HAL_GPIO_Init+0x334>)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_GPIO_Init+0x334>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003170:	4a12      	ldr	r2, [pc, #72]	; (80031bc <HAL_GPIO_Init+0x334>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3301      	adds	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b0f      	cmp	r3, #15
 8003180:	f67f ae90 	bls.w	8002ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	40013800 	.word	0x40013800
 800319c:	40020000 	.word	0x40020000
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40020800 	.word	0x40020800
 80031a8:	40020c00 	.word	0x40020c00
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40021400 	.word	0x40021400
 80031b4:	40021800 	.word	0x40021800
 80031b8:	40021c00 	.word	0x40021c00
 80031bc:	40013c00 	.word	0x40013c00

080031c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e001      	b.n	80031e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003200:	787b      	ldrb	r3, [r7, #1]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800320c:	e003      	b.n	8003216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	619a      	str	r2, [r3, #24]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	041a      	lsls	r2, r3, #16
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43d9      	mvns	r1, r3
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	400b      	ands	r3, r1
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	619a      	str	r2, [r3, #24]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe f95e 	bl	8001538 <HAL_GPIO_EXTI_Callback>
  }
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40013c00 	.word	0x40013c00

08003288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e264      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d075      	beq.n	8003392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032a6:	4ba3      	ldr	r3, [pc, #652]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d00c      	beq.n	80032cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b2:	4ba0      	ldr	r3, [pc, #640]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d112      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032be:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ca:	d10b      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	4b99      	ldr	r3, [pc, #612]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d05b      	beq.n	8003390 <HAL_RCC_OscConfig+0x108>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d157      	bne.n	8003390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e23f      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ec:	d106      	bne.n	80032fc <HAL_RCC_OscConfig+0x74>
 80032ee:	4b91      	ldr	r3, [pc, #580]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a90      	ldr	r2, [pc, #576]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e01d      	b.n	8003338 <HAL_RCC_OscConfig+0xb0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0x98>
 8003306:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a8a      	ldr	r2, [pc, #552]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a87      	ldr	r2, [pc, #540]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xb0>
 8003320:	4b84      	ldr	r3, [pc, #528]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a83      	ldr	r2, [pc, #524]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b81      	ldr	r3, [pc, #516]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a80      	ldr	r2, [pc, #512]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7ff f8ce 	bl	80024e0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003348:	f7ff f8ca 	bl	80024e0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e204      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b76      	ldr	r3, [pc, #472]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0xc0>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7ff f8ba 	bl	80024e0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003370:	f7ff f8b6 	bl	80024e0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1f0      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0xe8>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d063      	beq.n	8003466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800339e:	4b65      	ldr	r3, [pc, #404]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033aa:	4b62      	ldr	r3, [pc, #392]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d11c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b6:	4b5f      	ldr	r3, [pc, #380]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d116      	bne.n	80033f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_RCC_OscConfig+0x152>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1c4      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033da:	4b56      	ldr	r3, [pc, #344]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4952      	ldr	r1, [pc, #328]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	e03a      	b.n	8003466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f8:	4b4f      	ldr	r3, [pc, #316]	; (8003538 <HAL_RCC_OscConfig+0x2b0>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7ff f86f 	bl	80024e0 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003406:	f7ff f86b 	bl	80024e0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1a5      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003424:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4940      	ldr	r1, [pc, #256]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343a:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <HAL_RCC_OscConfig+0x2b0>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7ff f84e 	bl	80024e0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003448:	f7ff f84a 	bl	80024e0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e184      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	4b36      	ldr	r3, [pc, #216]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d030      	beq.n	80034d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCC_OscConfig+0x2b4>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7ff f82e 	bl	80024e0 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003488:	f7ff f82a 	bl	80024e0 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e164      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	4b26      	ldr	r3, [pc, #152]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x200>
 80034a6:	e015      	b.n	80034d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_OscConfig+0x2b4>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7ff f817 	bl	80024e0 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b6:	f7ff f813 	bl	80024e0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e14d      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a0 	beq.w	8003622 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10f      	bne.n	8003512 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a0e      	ldr	r2, [pc, #56]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350e:	2301      	movs	r3, #1
 8003510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x2b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d121      	bne.n	8003562 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_RCC_OscConfig+0x2b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_RCC_OscConfig+0x2b8>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352a:	f7fe ffd9 	bl	80024e0 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003530:	e011      	b.n	8003556 <HAL_RCC_OscConfig+0x2ce>
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	42470000 	.word	0x42470000
 800353c:	42470e80 	.word	0x42470e80
 8003540:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003544:	f7fe ffcc 	bl	80024e0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e106      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b85      	ldr	r3, [pc, #532]	; (800376c <HAL_RCC_OscConfig+0x4e4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x2f0>
 800356a:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	4a80      	ldr	r2, [pc, #512]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6713      	str	r3, [r2, #112]	; 0x70
 8003576:	e01c      	b.n	80035b2 <HAL_RCC_OscConfig+0x32a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x312>
 8003580:	4b7b      	ldr	r3, [pc, #492]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	4a7a      	ldr	r2, [pc, #488]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	6713      	str	r3, [r2, #112]	; 0x70
 800358c:	4b78      	ldr	r3, [pc, #480]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a77      	ldr	r2, [pc, #476]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x32a>
 800359a:	4b75      	ldr	r3, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a74      	ldr	r2, [pc, #464]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	4b72      	ldr	r3, [pc, #456]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a71      	ldr	r2, [pc, #452]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe ff91 	bl	80024e0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fe ff8d 	bl	80024e0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0c5      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ee      	beq.n	80035c2 <HAL_RCC_OscConfig+0x33a>
 80035e4:	e014      	b.n	8003610 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e6:	f7fe ff7b 	bl	80024e0 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe ff77 	bl	80024e0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0af      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	4b5a      	ldr	r3, [pc, #360]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ee      	bne.n	80035ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a55      	ldr	r2, [pc, #340]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 809b 	beq.w	8003762 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d05c      	beq.n	80036f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d141      	bne.n	80036c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fe ff4b 	bl	80024e0 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364e:	f7fe ff47 	bl	80024e0 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e081      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003660:	4b43      	ldr	r3, [pc, #268]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	019b      	lsls	r3, r3, #6
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	3b01      	subs	r3, #1
 8003686:	041b      	lsls	r3, r3, #16
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	061b      	lsls	r3, r3, #24
 8003690:	4937      	ldr	r1, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003696:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe ff20 	bl	80024e0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fe ff1c 	bl	80024e0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e056      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x41c>
 80036c2:	e04e      	b.n	8003762 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe ff09 	bl	80024e0 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe ff05 	bl	80024e0 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e03f      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x44a>
 80036f0:	e037      	b.n	8003762 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e032      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d028      	beq.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d121      	bne.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d11a      	bne.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800372e:	4013      	ands	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003734:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003736:	4293      	cmp	r3, r2
 8003738:	d111      	bne.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d107      	bne.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40007000 	.word	0x40007000
 8003770:	40023800 	.word	0x40023800
 8003774:	42470060 	.word	0x42470060

08003778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0cc      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800378c:	4b68      	ldr	r3, [pc, #416]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d90c      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0b8      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037cc:	4b59      	ldr	r3, [pc, #356]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a58      	ldr	r2, [pc, #352]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e4:	4b53      	ldr	r3, [pc, #332]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a52      	ldr	r2, [pc, #328]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b50      	ldr	r3, [pc, #320]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	494d      	ldr	r1, [pc, #308]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d044      	beq.n	8003898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	4b47      	ldr	r3, [pc, #284]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d119      	bne.n	8003856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e07f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d003      	beq.n	8003836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003832:	2b03      	cmp	r3, #3
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003836:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003846:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e067      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003856:	4b37      	ldr	r3, [pc, #220]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 0203 	bic.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4934      	ldr	r1, [pc, #208]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003868:	f7fe fe3a 	bl	80024e0 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	e00a      	b.n	8003886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003870:	f7fe fe36 	bl	80024e0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e04f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 020c 	and.w	r2, r3, #12
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	429a      	cmp	r2, r3
 8003896:	d1eb      	bne.n	8003870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d20c      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b22      	ldr	r3, [pc, #136]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e032      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4916      	ldr	r1, [pc, #88]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	490e      	ldr	r1, [pc, #56]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038fe:	f000 f821 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 8003902:	4602      	mov	r2, r0
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	490a      	ldr	r1, [pc, #40]	; (8003938 <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	5ccb      	ldrb	r3, [r1, r3]
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fd9a 	bl	8002458 <HAL_InitTick>

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023c00 	.word	0x40023c00
 8003934:	40023800 	.word	0x40023800
 8003938:	080054fc 	.word	0x080054fc
 800393c:	20000004 	.word	0x20000004
 8003940:	20000008 	.word	0x20000008

08003944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800394a:	2100      	movs	r1, #0
 800394c:	6079      	str	r1, [r7, #4]
 800394e:	2100      	movs	r1, #0
 8003950:	60f9      	str	r1, [r7, #12]
 8003952:	2100      	movs	r1, #0
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003956:	2100      	movs	r1, #0
 8003958:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800395a:	4952      	ldr	r1, [pc, #328]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 800395c:	6889      	ldr	r1, [r1, #8]
 800395e:	f001 010c 	and.w	r1, r1, #12
 8003962:	2908      	cmp	r1, #8
 8003964:	d00d      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x3e>
 8003966:	2908      	cmp	r1, #8
 8003968:	f200 8094 	bhi.w	8003a94 <HAL_RCC_GetSysClockFreq+0x150>
 800396c:	2900      	cmp	r1, #0
 800396e:	d002      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x32>
 8003970:	2904      	cmp	r1, #4
 8003972:	d003      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x38>
 8003974:	e08e      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003976:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003978:	60bb      	str	r3, [r7, #8]
       break;
 800397a:	e08e      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <HAL_RCC_GetSysClockFreq+0x168>)
 800397e:	60bb      	str	r3, [r7, #8]
      break;
 8003980:	e08b      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003982:	4948      	ldr	r1, [pc, #288]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003984:	6849      	ldr	r1, [r1, #4]
 8003986:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800398a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800398c:	4945      	ldr	r1, [pc, #276]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 800398e:	6849      	ldr	r1, [r1, #4]
 8003990:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003994:	2900      	cmp	r1, #0
 8003996:	d024      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003998:	4942      	ldr	r1, [pc, #264]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 800399a:	6849      	ldr	r1, [r1, #4]
 800399c:	0989      	lsrs	r1, r1, #6
 800399e:	4608      	mov	r0, r1
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80039a8:	f04f 0500 	mov.w	r5, #0
 80039ac:	ea00 0204 	and.w	r2, r0, r4
 80039b0:	ea01 0305 	and.w	r3, r1, r5
 80039b4:	493d      	ldr	r1, [pc, #244]	; (8003aac <HAL_RCC_GetSysClockFreq+0x168>)
 80039b6:	fb01 f003 	mul.w	r0, r1, r3
 80039ba:	2100      	movs	r1, #0
 80039bc:	fb01 f102 	mul.w	r1, r1, r2
 80039c0:	1844      	adds	r4, r0, r1
 80039c2:	493a      	ldr	r1, [pc, #232]	; (8003aac <HAL_RCC_GetSysClockFreq+0x168>)
 80039c4:	fba2 0101 	umull	r0, r1, r2, r1
 80039c8:	1863      	adds	r3, r4, r1
 80039ca:	4619      	mov	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	f7fc fe30 	bl	8000638 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4613      	mov	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e04a      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e2:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	461a      	mov	r2, r3
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	ea02 0400 	and.w	r4, r2, r0
 80039fa:	ea03 0501 	and.w	r5, r3, r1
 80039fe:	4620      	mov	r0, r4
 8003a00:	4629      	mov	r1, r5
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	014b      	lsls	r3, r1, #5
 8003a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a10:	0142      	lsls	r2, r0, #5
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	1b00      	subs	r0, r0, r4
 8003a18:	eb61 0105 	sbc.w	r1, r1, r5
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	018b      	lsls	r3, r1, #6
 8003a26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a2a:	0182      	lsls	r2, r0, #6
 8003a2c:	1a12      	subs	r2, r2, r0
 8003a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a32:	f04f 0000 	mov.w	r0, #0
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	00d9      	lsls	r1, r3, #3
 8003a3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a40:	00d0      	lsls	r0, r2, #3
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	1912      	adds	r2, r2, r4
 8003a48:	eb45 0303 	adc.w	r3, r5, r3
 8003a4c:	f04f 0000 	mov.w	r0, #0
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	0299      	lsls	r1, r3, #10
 8003a56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a5a:	0290      	lsls	r0, r2, #10
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	f7fc fde4 	bl	8000638 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4613      	mov	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	3301      	adds	r3, #1
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	60bb      	str	r3, [r7, #8]
      break;
 8003a92:	e002      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a96:	60bb      	str	r3, [r7, #8]
      break;
 8003a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	00f42400 	.word	0x00f42400
 8003aac:	017d7840 	.word	0x017d7840

08003ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07b      	b.n	8003bba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad2:	d009      	beq.n	8003ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
 8003ada:	e005      	b.n	8003ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fe faa8 	bl	8002058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	ea42 0103 	orr.w	r1, r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	f003 0104 	and.w	r1, r3, #4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	f003 0210 	and.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_SPI_Transmit_DMA+0x20>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e09b      	b.n	8003d1c <HAL_SPI_Transmit_DMA+0x158>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d002      	beq.n	8003bfe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bfc:	e089      	b.n	8003d12 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_SPI_Transmit_DMA+0x46>
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c0e:	e080      	b.n	8003d12 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2203      	movs	r2, #3
 8003c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c56:	d10f      	bne.n	8003c78 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7c:	4a29      	ldr	r2, [pc, #164]	; (8003d24 <HAL_SPI_Transmit_DMA+0x160>)
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c84:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <HAL_SPI_Transmit_DMA+0x164>)
 8003c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	4a27      	ldr	r2, [pc, #156]	; (8003d2c <HAL_SPI_Transmit_DMA+0x168>)
 8003c8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c94:	2200      	movs	r2, #0
 8003c96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003cb0:	f7fe fe06 	bl	80028c0 <HAL_DMA_Start_IT>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003cd2:	e01e      	b.n	8003d12 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d007      	beq.n	8003cf2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0220 	orr.w	r2, r2, #32
 8003d00:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0202 	orr.w	r2, r2, #2
 8003d10:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	08004001 	.word	0x08004001
 8003d28:	08003f59 	.word	0x08003f59
 8003d2c:	0800401d 	.word	0x0800401d

08003d30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	099b      	lsrs	r3, r3, #6
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10f      	bne.n	8003d74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
    return;
 8003d72:	e0d7      	b.n	8003f24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_SPI_IRQHandler+0x66>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	09db      	lsrs	r3, r3, #7
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
    return;
 8003d94:	e0c6      	b.n	8003f24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10c      	bne.n	8003dbc <HAL_SPI_IRQHandler+0x8c>
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80b4 	beq.w	8003f24 <HAL_SPI_IRQHandler+0x1f4>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80ad 	beq.w	8003f24 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	099b      	lsrs	r3, r3, #6
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d023      	beq.n	8003e1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d011      	beq.n	8003e06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	e00b      	b.n	8003e1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	693b      	ldr	r3, [r7, #16]
        return;
 8003e1c:	e082      	b.n	8003f24 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d014      	beq.n	8003e54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00c      	beq.n	8003e7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f043 0208 	orr.w	r2, r3, #8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04f      	beq.n	8003f22 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <HAL_SPI_IRQHandler+0x17e>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d034      	beq.n	8003f18 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0203 	bic.w	r2, r2, #3
 8003ebc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d011      	beq.n	8003eea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <HAL_SPI_IRQHandler+0x1fc>)
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fd4c 	bl	8002970 <HAL_DMA_Abort_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d016      	beq.n	8003f20 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef6:	4a0d      	ldr	r2, [pc, #52]	; (8003f2c <HAL_SPI_IRQHandler+0x1fc>)
 8003ef8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fd36 	bl	8002970 <HAL_DMA_Abort_IT>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003f16:	e003      	b.n	8003f20 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f813 	bl	8003f44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f1e:	e000      	b.n	8003f22 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003f20:	bf00      	nop
    return;
 8003f22:	bf00      	nop
  }
}
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	0800405d 	.word	0x0800405d

08003f30 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f66:	f7fe fabb 	bl	80024e0 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7a:	d03b      	beq.n	8003ff4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0220 	bic.w	r2, r2, #32
 8003f8a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0202 	bic.w	r2, r2, #2
 8003f9a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	2164      	movs	r1, #100	; 0x64
 8003fa0:	6978      	ldr	r0, [r7, #20]
 8003fa2:	f000 f8f7 	bl	8004194 <SPI_EndRxTxTransaction>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003fec:	6978      	ldr	r0, [r7, #20]
 8003fee:	f7ff ffa9 	bl	8003f44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003ff2:	e002      	b.n	8003ffa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003ff4:	6978      	ldr	r0, [r7, #20]
 8003ff6:	f7fc fc9b 	bl	8000930 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff ff8e 	bl	8003f30 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0203 	bic.w	r2, r2, #3
 8004038:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f043 0210 	orr.w	r2, r3, #16
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff ff78 	bl	8003f44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff ff64 	bl	8003f44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004094:	f7fe fa24 	bl	80024e0 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	4413      	add	r3, r2
 80040a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040a4:	f7fe fa1c 	bl	80024e0 <HAL_GetTick>
 80040a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040aa:	4b39      	ldr	r3, [pc, #228]	; (8004190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	015b      	lsls	r3, r3, #5
 80040b0:	0d1b      	lsrs	r3, r3, #20
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	fb02 f303 	mul.w	r3, r2, r3
 80040b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ba:	e054      	b.n	8004166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d050      	beq.n	8004166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040c4:	f7fe fa0c 	bl	80024e0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d902      	bls.n	80040da <SPI_WaitFlagStateUntilTimeout+0x56>
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d13d      	bne.n	8004156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f2:	d111      	bne.n	8004118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	d004      	beq.n	8004108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	d107      	bne.n	8004118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004120:	d10f      	bne.n	8004142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e017      	b.n	8004186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3b01      	subs	r3, #1
 8004164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4013      	ands	r3, r2
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	429a      	cmp	r2, r3
 8004182:	d19b      	bne.n	80040bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000004 	.word	0x20000004

08004194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041a0:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <SPI_EndRxTxTransaction+0x7c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <SPI_EndRxTxTransaction+0x80>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0d5b      	lsrs	r3, r3, #21
 80041ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b0:	fb02 f303 	mul.w	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041be:	d112      	bne.n	80041e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2200      	movs	r2, #0
 80041c8:	2180      	movs	r1, #128	; 0x80
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff ff5a 	bl	8004084 <SPI_WaitFlagStateUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f043 0220 	orr.w	r2, r3, #32
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e00f      	b.n	8004206 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d0f2      	beq.n	80041e6 <SPI_EndRxTxTransaction+0x52>
 8004200:	e000      	b.n	8004204 <SPI_EndRxTxTransaction+0x70>
        break;
 8004202:	bf00      	nop
  }

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000004 	.word	0x20000004
 8004214:	165e9f81 	.word	0x165e9f81

08004218 <__errno>:
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <__errno+0x8>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000010 	.word	0x20000010

08004224 <__libc_init_array>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4d0d      	ldr	r5, [pc, #52]	; (800425c <__libc_init_array+0x38>)
 8004228:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <__libc_init_array+0x3c>)
 800422a:	1b64      	subs	r4, r4, r5
 800422c:	10a4      	asrs	r4, r4, #2
 800422e:	2600      	movs	r6, #0
 8004230:	42a6      	cmp	r6, r4
 8004232:	d109      	bne.n	8004248 <__libc_init_array+0x24>
 8004234:	4d0b      	ldr	r5, [pc, #44]	; (8004264 <__libc_init_array+0x40>)
 8004236:	4c0c      	ldr	r4, [pc, #48]	; (8004268 <__libc_init_array+0x44>)
 8004238:	f001 f822 	bl	8005280 <_init>
 800423c:	1b64      	subs	r4, r4, r5
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	2600      	movs	r6, #0
 8004242:	42a6      	cmp	r6, r4
 8004244:	d105      	bne.n	8004252 <__libc_init_array+0x2e>
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	f855 3b04 	ldr.w	r3, [r5], #4
 800424c:	4798      	blx	r3
 800424e:	3601      	adds	r6, #1
 8004250:	e7ee      	b.n	8004230 <__libc_init_array+0xc>
 8004252:	f855 3b04 	ldr.w	r3, [r5], #4
 8004256:	4798      	blx	r3
 8004258:	3601      	adds	r6, #1
 800425a:	e7f2      	b.n	8004242 <__libc_init_array+0x1e>
 800425c:	08005668 	.word	0x08005668
 8004260:	08005668 	.word	0x08005668
 8004264:	08005668 	.word	0x08005668
 8004268:	0800566c 	.word	0x0800566c

0800426c <memset>:
 800426c:	4402      	add	r2, r0
 800426e:	4603      	mov	r3, r0
 8004270:	4293      	cmp	r3, r2
 8004272:	d100      	bne.n	8004276 <memset+0xa>
 8004274:	4770      	bx	lr
 8004276:	f803 1b01 	strb.w	r1, [r3], #1
 800427a:	e7f9      	b.n	8004270 <memset+0x4>

0800427c <rand>:
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <rand+0x60>)
 800427e:	b510      	push	{r4, lr}
 8004280:	681c      	ldr	r4, [r3, #0]
 8004282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004284:	b9b3      	cbnz	r3, 80042b4 <rand+0x38>
 8004286:	2018      	movs	r0, #24
 8004288:	f000 f868 	bl	800435c <malloc>
 800428c:	63a0      	str	r0, [r4, #56]	; 0x38
 800428e:	b928      	cbnz	r0, 800429c <rand+0x20>
 8004290:	4602      	mov	r2, r0
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <rand+0x64>)
 8004294:	4813      	ldr	r0, [pc, #76]	; (80042e4 <rand+0x68>)
 8004296:	214e      	movs	r1, #78	; 0x4e
 8004298:	f000 f830 	bl	80042fc <__assert_func>
 800429c:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <rand+0x6c>)
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <rand+0x70>)
 80042a0:	e9c0 2300 	strd	r2, r3, [r0]
 80042a4:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <rand+0x74>)
 80042a6:	6083      	str	r3, [r0, #8]
 80042a8:	230b      	movs	r3, #11
 80042aa:	8183      	strh	r3, [r0, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	2300      	movs	r3, #0
 80042b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80042b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80042b6:	480f      	ldr	r0, [pc, #60]	; (80042f4 <rand+0x78>)
 80042b8:	690a      	ldr	r2, [r1, #16]
 80042ba:	694b      	ldr	r3, [r1, #20]
 80042bc:	4c0e      	ldr	r4, [pc, #56]	; (80042f8 <rand+0x7c>)
 80042be:	4350      	muls	r0, r2
 80042c0:	fb04 0003 	mla	r0, r4, r3, r0
 80042c4:	fba2 3404 	umull	r3, r4, r2, r4
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	4404      	add	r4, r0
 80042cc:	f144 0000 	adc.w	r0, r4, #0
 80042d0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80042d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	bf00      	nop
 80042dc:	20000010 	.word	0x20000010
 80042e0:	08005518 	.word	0x08005518
 80042e4:	0800552f 	.word	0x0800552f
 80042e8:	abcd330e 	.word	0xabcd330e
 80042ec:	e66d1234 	.word	0xe66d1234
 80042f0:	0005deec 	.word	0x0005deec
 80042f4:	5851f42d 	.word	0x5851f42d
 80042f8:	4c957f2d 	.word	0x4c957f2d

080042fc <__assert_func>:
 80042fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042fe:	4614      	mov	r4, r2
 8004300:	461a      	mov	r2, r3
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <__assert_func+0x2c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4605      	mov	r5, r0
 8004308:	68d8      	ldr	r0, [r3, #12]
 800430a:	b14c      	cbz	r4, 8004320 <__assert_func+0x24>
 800430c:	4b07      	ldr	r3, [pc, #28]	; (800432c <__assert_func+0x30>)
 800430e:	9100      	str	r1, [sp, #0]
 8004310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004314:	4906      	ldr	r1, [pc, #24]	; (8004330 <__assert_func+0x34>)
 8004316:	462b      	mov	r3, r5
 8004318:	f000 f80e 	bl	8004338 <fiprintf>
 800431c:	f000 fc8e 	bl	8004c3c <abort>
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <__assert_func+0x38>)
 8004322:	461c      	mov	r4, r3
 8004324:	e7f3      	b.n	800430e <__assert_func+0x12>
 8004326:	bf00      	nop
 8004328:	20000010 	.word	0x20000010
 800432c:	0800558e 	.word	0x0800558e
 8004330:	0800559b 	.word	0x0800559b
 8004334:	080055c9 	.word	0x080055c9

08004338 <fiprintf>:
 8004338:	b40e      	push	{r1, r2, r3}
 800433a:	b503      	push	{r0, r1, lr}
 800433c:	4601      	mov	r1, r0
 800433e:	ab03      	add	r3, sp, #12
 8004340:	4805      	ldr	r0, [pc, #20]	; (8004358 <fiprintf+0x20>)
 8004342:	f853 2b04 	ldr.w	r2, [r3], #4
 8004346:	6800      	ldr	r0, [r0, #0]
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	f000 f8e3 	bl	8004514 <_vfiprintf_r>
 800434e:	b002      	add	sp, #8
 8004350:	f85d eb04 	ldr.w	lr, [sp], #4
 8004354:	b003      	add	sp, #12
 8004356:	4770      	bx	lr
 8004358:	20000010 	.word	0x20000010

0800435c <malloc>:
 800435c:	4b02      	ldr	r3, [pc, #8]	; (8004368 <malloc+0xc>)
 800435e:	4601      	mov	r1, r0
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	f000 b853 	b.w	800440c <_malloc_r>
 8004366:	bf00      	nop
 8004368:	20000010 	.word	0x20000010

0800436c <_free_r>:
 800436c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800436e:	2900      	cmp	r1, #0
 8004370:	d048      	beq.n	8004404 <_free_r+0x98>
 8004372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004376:	9001      	str	r0, [sp, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f1a1 0404 	sub.w	r4, r1, #4
 800437e:	bfb8      	it	lt
 8004380:	18e4      	addlt	r4, r4, r3
 8004382:	f000 fe81 	bl	8005088 <__malloc_lock>
 8004386:	4a20      	ldr	r2, [pc, #128]	; (8004408 <_free_r+0x9c>)
 8004388:	9801      	ldr	r0, [sp, #4]
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	4615      	mov	r5, r2
 800438e:	b933      	cbnz	r3, 800439e <_free_r+0x32>
 8004390:	6063      	str	r3, [r4, #4]
 8004392:	6014      	str	r4, [r2, #0]
 8004394:	b003      	add	sp, #12
 8004396:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800439a:	f000 be7b 	b.w	8005094 <__malloc_unlock>
 800439e:	42a3      	cmp	r3, r4
 80043a0:	d90b      	bls.n	80043ba <_free_r+0x4e>
 80043a2:	6821      	ldr	r1, [r4, #0]
 80043a4:	1862      	adds	r2, r4, r1
 80043a6:	4293      	cmp	r3, r2
 80043a8:	bf04      	itt	eq
 80043aa:	681a      	ldreq	r2, [r3, #0]
 80043ac:	685b      	ldreq	r3, [r3, #4]
 80043ae:	6063      	str	r3, [r4, #4]
 80043b0:	bf04      	itt	eq
 80043b2:	1852      	addeq	r2, r2, r1
 80043b4:	6022      	streq	r2, [r4, #0]
 80043b6:	602c      	str	r4, [r5, #0]
 80043b8:	e7ec      	b.n	8004394 <_free_r+0x28>
 80043ba:	461a      	mov	r2, r3
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	b10b      	cbz	r3, 80043c4 <_free_r+0x58>
 80043c0:	42a3      	cmp	r3, r4
 80043c2:	d9fa      	bls.n	80043ba <_free_r+0x4e>
 80043c4:	6811      	ldr	r1, [r2, #0]
 80043c6:	1855      	adds	r5, r2, r1
 80043c8:	42a5      	cmp	r5, r4
 80043ca:	d10b      	bne.n	80043e4 <_free_r+0x78>
 80043cc:	6824      	ldr	r4, [r4, #0]
 80043ce:	4421      	add	r1, r4
 80043d0:	1854      	adds	r4, r2, r1
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	6011      	str	r1, [r2, #0]
 80043d6:	d1dd      	bne.n	8004394 <_free_r+0x28>
 80043d8:	681c      	ldr	r4, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	6053      	str	r3, [r2, #4]
 80043de:	4421      	add	r1, r4
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	e7d7      	b.n	8004394 <_free_r+0x28>
 80043e4:	d902      	bls.n	80043ec <_free_r+0x80>
 80043e6:	230c      	movs	r3, #12
 80043e8:	6003      	str	r3, [r0, #0]
 80043ea:	e7d3      	b.n	8004394 <_free_r+0x28>
 80043ec:	6825      	ldr	r5, [r4, #0]
 80043ee:	1961      	adds	r1, r4, r5
 80043f0:	428b      	cmp	r3, r1
 80043f2:	bf04      	itt	eq
 80043f4:	6819      	ldreq	r1, [r3, #0]
 80043f6:	685b      	ldreq	r3, [r3, #4]
 80043f8:	6063      	str	r3, [r4, #4]
 80043fa:	bf04      	itt	eq
 80043fc:	1949      	addeq	r1, r1, r5
 80043fe:	6021      	streq	r1, [r4, #0]
 8004400:	6054      	str	r4, [r2, #4]
 8004402:	e7c7      	b.n	8004394 <_free_r+0x28>
 8004404:	b003      	add	sp, #12
 8004406:	bd30      	pop	{r4, r5, pc}
 8004408:	20000098 	.word	0x20000098

0800440c <_malloc_r>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	1ccd      	adds	r5, r1, #3
 8004410:	f025 0503 	bic.w	r5, r5, #3
 8004414:	3508      	adds	r5, #8
 8004416:	2d0c      	cmp	r5, #12
 8004418:	bf38      	it	cc
 800441a:	250c      	movcc	r5, #12
 800441c:	2d00      	cmp	r5, #0
 800441e:	4606      	mov	r6, r0
 8004420:	db01      	blt.n	8004426 <_malloc_r+0x1a>
 8004422:	42a9      	cmp	r1, r5
 8004424:	d903      	bls.n	800442e <_malloc_r+0x22>
 8004426:	230c      	movs	r3, #12
 8004428:	6033      	str	r3, [r6, #0]
 800442a:	2000      	movs	r0, #0
 800442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442e:	f000 fe2b 	bl	8005088 <__malloc_lock>
 8004432:	4921      	ldr	r1, [pc, #132]	; (80044b8 <_malloc_r+0xac>)
 8004434:	680a      	ldr	r2, [r1, #0]
 8004436:	4614      	mov	r4, r2
 8004438:	b99c      	cbnz	r4, 8004462 <_malloc_r+0x56>
 800443a:	4f20      	ldr	r7, [pc, #128]	; (80044bc <_malloc_r+0xb0>)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	b923      	cbnz	r3, 800444a <_malloc_r+0x3e>
 8004440:	4621      	mov	r1, r4
 8004442:	4630      	mov	r0, r6
 8004444:	f000 fb2a 	bl	8004a9c <_sbrk_r>
 8004448:	6038      	str	r0, [r7, #0]
 800444a:	4629      	mov	r1, r5
 800444c:	4630      	mov	r0, r6
 800444e:	f000 fb25 	bl	8004a9c <_sbrk_r>
 8004452:	1c43      	adds	r3, r0, #1
 8004454:	d123      	bne.n	800449e <_malloc_r+0x92>
 8004456:	230c      	movs	r3, #12
 8004458:	6033      	str	r3, [r6, #0]
 800445a:	4630      	mov	r0, r6
 800445c:	f000 fe1a 	bl	8005094 <__malloc_unlock>
 8004460:	e7e3      	b.n	800442a <_malloc_r+0x1e>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	1b5b      	subs	r3, r3, r5
 8004466:	d417      	bmi.n	8004498 <_malloc_r+0x8c>
 8004468:	2b0b      	cmp	r3, #11
 800446a:	d903      	bls.n	8004474 <_malloc_r+0x68>
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	441c      	add	r4, r3
 8004470:	6025      	str	r5, [r4, #0]
 8004472:	e004      	b.n	800447e <_malloc_r+0x72>
 8004474:	6863      	ldr	r3, [r4, #4]
 8004476:	42a2      	cmp	r2, r4
 8004478:	bf0c      	ite	eq
 800447a:	600b      	streq	r3, [r1, #0]
 800447c:	6053      	strne	r3, [r2, #4]
 800447e:	4630      	mov	r0, r6
 8004480:	f000 fe08 	bl	8005094 <__malloc_unlock>
 8004484:	f104 000b 	add.w	r0, r4, #11
 8004488:	1d23      	adds	r3, r4, #4
 800448a:	f020 0007 	bic.w	r0, r0, #7
 800448e:	1ac2      	subs	r2, r0, r3
 8004490:	d0cc      	beq.n	800442c <_malloc_r+0x20>
 8004492:	1a1b      	subs	r3, r3, r0
 8004494:	50a3      	str	r3, [r4, r2]
 8004496:	e7c9      	b.n	800442c <_malloc_r+0x20>
 8004498:	4622      	mov	r2, r4
 800449a:	6864      	ldr	r4, [r4, #4]
 800449c:	e7cc      	b.n	8004438 <_malloc_r+0x2c>
 800449e:	1cc4      	adds	r4, r0, #3
 80044a0:	f024 0403 	bic.w	r4, r4, #3
 80044a4:	42a0      	cmp	r0, r4
 80044a6:	d0e3      	beq.n	8004470 <_malloc_r+0x64>
 80044a8:	1a21      	subs	r1, r4, r0
 80044aa:	4630      	mov	r0, r6
 80044ac:	f000 faf6 	bl	8004a9c <_sbrk_r>
 80044b0:	3001      	adds	r0, #1
 80044b2:	d1dd      	bne.n	8004470 <_malloc_r+0x64>
 80044b4:	e7cf      	b.n	8004456 <_malloc_r+0x4a>
 80044b6:	bf00      	nop
 80044b8:	20000098 	.word	0x20000098
 80044bc:	2000009c 	.word	0x2000009c

080044c0 <__sfputc_r>:
 80044c0:	6893      	ldr	r3, [r2, #8]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	b410      	push	{r4}
 80044c8:	6093      	str	r3, [r2, #8]
 80044ca:	da08      	bge.n	80044de <__sfputc_r+0x1e>
 80044cc:	6994      	ldr	r4, [r2, #24]
 80044ce:	42a3      	cmp	r3, r4
 80044d0:	db01      	blt.n	80044d6 <__sfputc_r+0x16>
 80044d2:	290a      	cmp	r1, #10
 80044d4:	d103      	bne.n	80044de <__sfputc_r+0x1e>
 80044d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044da:	f000 baef 	b.w	8004abc <__swbuf_r>
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	1c58      	adds	r0, r3, #1
 80044e2:	6010      	str	r0, [r2, #0]
 80044e4:	7019      	strb	r1, [r3, #0]
 80044e6:	4608      	mov	r0, r1
 80044e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <__sfputs_r>:
 80044ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f0:	4606      	mov	r6, r0
 80044f2:	460f      	mov	r7, r1
 80044f4:	4614      	mov	r4, r2
 80044f6:	18d5      	adds	r5, r2, r3
 80044f8:	42ac      	cmp	r4, r5
 80044fa:	d101      	bne.n	8004500 <__sfputs_r+0x12>
 80044fc:	2000      	movs	r0, #0
 80044fe:	e007      	b.n	8004510 <__sfputs_r+0x22>
 8004500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004504:	463a      	mov	r2, r7
 8004506:	4630      	mov	r0, r6
 8004508:	f7ff ffda 	bl	80044c0 <__sfputc_r>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d1f3      	bne.n	80044f8 <__sfputs_r+0xa>
 8004510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004514 <_vfiprintf_r>:
 8004514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004518:	460d      	mov	r5, r1
 800451a:	b09d      	sub	sp, #116	; 0x74
 800451c:	4614      	mov	r4, r2
 800451e:	4698      	mov	r8, r3
 8004520:	4606      	mov	r6, r0
 8004522:	b118      	cbz	r0, 800452c <_vfiprintf_r+0x18>
 8004524:	6983      	ldr	r3, [r0, #24]
 8004526:	b90b      	cbnz	r3, 800452c <_vfiprintf_r+0x18>
 8004528:	f000 fcaa 	bl	8004e80 <__sinit>
 800452c:	4b89      	ldr	r3, [pc, #548]	; (8004754 <_vfiprintf_r+0x240>)
 800452e:	429d      	cmp	r5, r3
 8004530:	d11b      	bne.n	800456a <_vfiprintf_r+0x56>
 8004532:	6875      	ldr	r5, [r6, #4]
 8004534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004536:	07d9      	lsls	r1, r3, #31
 8004538:	d405      	bmi.n	8004546 <_vfiprintf_r+0x32>
 800453a:	89ab      	ldrh	r3, [r5, #12]
 800453c:	059a      	lsls	r2, r3, #22
 800453e:	d402      	bmi.n	8004546 <_vfiprintf_r+0x32>
 8004540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004542:	f000 fd3b 	bl	8004fbc <__retarget_lock_acquire_recursive>
 8004546:	89ab      	ldrh	r3, [r5, #12]
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	d501      	bpl.n	8004550 <_vfiprintf_r+0x3c>
 800454c:	692b      	ldr	r3, [r5, #16]
 800454e:	b9eb      	cbnz	r3, 800458c <_vfiprintf_r+0x78>
 8004550:	4629      	mov	r1, r5
 8004552:	4630      	mov	r0, r6
 8004554:	f000 fb04 	bl	8004b60 <__swsetup_r>
 8004558:	b1c0      	cbz	r0, 800458c <_vfiprintf_r+0x78>
 800455a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800455c:	07dc      	lsls	r4, r3, #31
 800455e:	d50e      	bpl.n	800457e <_vfiprintf_r+0x6a>
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	b01d      	add	sp, #116	; 0x74
 8004566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456a:	4b7b      	ldr	r3, [pc, #492]	; (8004758 <_vfiprintf_r+0x244>)
 800456c:	429d      	cmp	r5, r3
 800456e:	d101      	bne.n	8004574 <_vfiprintf_r+0x60>
 8004570:	68b5      	ldr	r5, [r6, #8]
 8004572:	e7df      	b.n	8004534 <_vfiprintf_r+0x20>
 8004574:	4b79      	ldr	r3, [pc, #484]	; (800475c <_vfiprintf_r+0x248>)
 8004576:	429d      	cmp	r5, r3
 8004578:	bf08      	it	eq
 800457a:	68f5      	ldreq	r5, [r6, #12]
 800457c:	e7da      	b.n	8004534 <_vfiprintf_r+0x20>
 800457e:	89ab      	ldrh	r3, [r5, #12]
 8004580:	0598      	lsls	r0, r3, #22
 8004582:	d4ed      	bmi.n	8004560 <_vfiprintf_r+0x4c>
 8004584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004586:	f000 fd1a 	bl	8004fbe <__retarget_lock_release_recursive>
 800458a:	e7e9      	b.n	8004560 <_vfiprintf_r+0x4c>
 800458c:	2300      	movs	r3, #0
 800458e:	9309      	str	r3, [sp, #36]	; 0x24
 8004590:	2320      	movs	r3, #32
 8004592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004596:	f8cd 800c 	str.w	r8, [sp, #12]
 800459a:	2330      	movs	r3, #48	; 0x30
 800459c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004760 <_vfiprintf_r+0x24c>
 80045a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045a4:	f04f 0901 	mov.w	r9, #1
 80045a8:	4623      	mov	r3, r4
 80045aa:	469a      	mov	sl, r3
 80045ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045b0:	b10a      	cbz	r2, 80045b6 <_vfiprintf_r+0xa2>
 80045b2:	2a25      	cmp	r2, #37	; 0x25
 80045b4:	d1f9      	bne.n	80045aa <_vfiprintf_r+0x96>
 80045b6:	ebba 0b04 	subs.w	fp, sl, r4
 80045ba:	d00b      	beq.n	80045d4 <_vfiprintf_r+0xc0>
 80045bc:	465b      	mov	r3, fp
 80045be:	4622      	mov	r2, r4
 80045c0:	4629      	mov	r1, r5
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7ff ff93 	bl	80044ee <__sfputs_r>
 80045c8:	3001      	adds	r0, #1
 80045ca:	f000 80aa 	beq.w	8004722 <_vfiprintf_r+0x20e>
 80045ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045d0:	445a      	add	r2, fp
 80045d2:	9209      	str	r2, [sp, #36]	; 0x24
 80045d4:	f89a 3000 	ldrb.w	r3, [sl]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a2 	beq.w	8004722 <_vfiprintf_r+0x20e>
 80045de:	2300      	movs	r3, #0
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295
 80045e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045e8:	f10a 0a01 	add.w	sl, sl, #1
 80045ec:	9304      	str	r3, [sp, #16]
 80045ee:	9307      	str	r3, [sp, #28]
 80045f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045f4:	931a      	str	r3, [sp, #104]	; 0x68
 80045f6:	4654      	mov	r4, sl
 80045f8:	2205      	movs	r2, #5
 80045fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045fe:	4858      	ldr	r0, [pc, #352]	; (8004760 <_vfiprintf_r+0x24c>)
 8004600:	f7fb fdee 	bl	80001e0 <memchr>
 8004604:	9a04      	ldr	r2, [sp, #16]
 8004606:	b9d8      	cbnz	r0, 8004640 <_vfiprintf_r+0x12c>
 8004608:	06d1      	lsls	r1, r2, #27
 800460a:	bf44      	itt	mi
 800460c:	2320      	movmi	r3, #32
 800460e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004612:	0713      	lsls	r3, r2, #28
 8004614:	bf44      	itt	mi
 8004616:	232b      	movmi	r3, #43	; 0x2b
 8004618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800461c:	f89a 3000 	ldrb.w	r3, [sl]
 8004620:	2b2a      	cmp	r3, #42	; 0x2a
 8004622:	d015      	beq.n	8004650 <_vfiprintf_r+0x13c>
 8004624:	9a07      	ldr	r2, [sp, #28]
 8004626:	4654      	mov	r4, sl
 8004628:	2000      	movs	r0, #0
 800462a:	f04f 0c0a 	mov.w	ip, #10
 800462e:	4621      	mov	r1, r4
 8004630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004634:	3b30      	subs	r3, #48	; 0x30
 8004636:	2b09      	cmp	r3, #9
 8004638:	d94e      	bls.n	80046d8 <_vfiprintf_r+0x1c4>
 800463a:	b1b0      	cbz	r0, 800466a <_vfiprintf_r+0x156>
 800463c:	9207      	str	r2, [sp, #28]
 800463e:	e014      	b.n	800466a <_vfiprintf_r+0x156>
 8004640:	eba0 0308 	sub.w	r3, r0, r8
 8004644:	fa09 f303 	lsl.w	r3, r9, r3
 8004648:	4313      	orrs	r3, r2
 800464a:	9304      	str	r3, [sp, #16]
 800464c:	46a2      	mov	sl, r4
 800464e:	e7d2      	b.n	80045f6 <_vfiprintf_r+0xe2>
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	1d19      	adds	r1, r3, #4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	9103      	str	r1, [sp, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	bfbb      	ittet	lt
 800465c:	425b      	neglt	r3, r3
 800465e:	f042 0202 	orrlt.w	r2, r2, #2
 8004662:	9307      	strge	r3, [sp, #28]
 8004664:	9307      	strlt	r3, [sp, #28]
 8004666:	bfb8      	it	lt
 8004668:	9204      	strlt	r2, [sp, #16]
 800466a:	7823      	ldrb	r3, [r4, #0]
 800466c:	2b2e      	cmp	r3, #46	; 0x2e
 800466e:	d10c      	bne.n	800468a <_vfiprintf_r+0x176>
 8004670:	7863      	ldrb	r3, [r4, #1]
 8004672:	2b2a      	cmp	r3, #42	; 0x2a
 8004674:	d135      	bne.n	80046e2 <_vfiprintf_r+0x1ce>
 8004676:	9b03      	ldr	r3, [sp, #12]
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	9203      	str	r2, [sp, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	bfb8      	it	lt
 8004682:	f04f 33ff 	movlt.w	r3, #4294967295
 8004686:	3402      	adds	r4, #2
 8004688:	9305      	str	r3, [sp, #20]
 800468a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004770 <_vfiprintf_r+0x25c>
 800468e:	7821      	ldrb	r1, [r4, #0]
 8004690:	2203      	movs	r2, #3
 8004692:	4650      	mov	r0, sl
 8004694:	f7fb fda4 	bl	80001e0 <memchr>
 8004698:	b140      	cbz	r0, 80046ac <_vfiprintf_r+0x198>
 800469a:	2340      	movs	r3, #64	; 0x40
 800469c:	eba0 000a 	sub.w	r0, r0, sl
 80046a0:	fa03 f000 	lsl.w	r0, r3, r0
 80046a4:	9b04      	ldr	r3, [sp, #16]
 80046a6:	4303      	orrs	r3, r0
 80046a8:	3401      	adds	r4, #1
 80046aa:	9304      	str	r3, [sp, #16]
 80046ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b0:	482c      	ldr	r0, [pc, #176]	; (8004764 <_vfiprintf_r+0x250>)
 80046b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b6:	2206      	movs	r2, #6
 80046b8:	f7fb fd92 	bl	80001e0 <memchr>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d03f      	beq.n	8004740 <_vfiprintf_r+0x22c>
 80046c0:	4b29      	ldr	r3, [pc, #164]	; (8004768 <_vfiprintf_r+0x254>)
 80046c2:	bb1b      	cbnz	r3, 800470c <_vfiprintf_r+0x1f8>
 80046c4:	9b03      	ldr	r3, [sp, #12]
 80046c6:	3307      	adds	r3, #7
 80046c8:	f023 0307 	bic.w	r3, r3, #7
 80046cc:	3308      	adds	r3, #8
 80046ce:	9303      	str	r3, [sp, #12]
 80046d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d2:	443b      	add	r3, r7
 80046d4:	9309      	str	r3, [sp, #36]	; 0x24
 80046d6:	e767      	b.n	80045a8 <_vfiprintf_r+0x94>
 80046d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80046dc:	460c      	mov	r4, r1
 80046de:	2001      	movs	r0, #1
 80046e0:	e7a5      	b.n	800462e <_vfiprintf_r+0x11a>
 80046e2:	2300      	movs	r3, #0
 80046e4:	3401      	adds	r4, #1
 80046e6:	9305      	str	r3, [sp, #20]
 80046e8:	4619      	mov	r1, r3
 80046ea:	f04f 0c0a 	mov.w	ip, #10
 80046ee:	4620      	mov	r0, r4
 80046f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046f4:	3a30      	subs	r2, #48	; 0x30
 80046f6:	2a09      	cmp	r2, #9
 80046f8:	d903      	bls.n	8004702 <_vfiprintf_r+0x1ee>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0c5      	beq.n	800468a <_vfiprintf_r+0x176>
 80046fe:	9105      	str	r1, [sp, #20]
 8004700:	e7c3      	b.n	800468a <_vfiprintf_r+0x176>
 8004702:	fb0c 2101 	mla	r1, ip, r1, r2
 8004706:	4604      	mov	r4, r0
 8004708:	2301      	movs	r3, #1
 800470a:	e7f0      	b.n	80046ee <_vfiprintf_r+0x1da>
 800470c:	ab03      	add	r3, sp, #12
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	462a      	mov	r2, r5
 8004712:	4b16      	ldr	r3, [pc, #88]	; (800476c <_vfiprintf_r+0x258>)
 8004714:	a904      	add	r1, sp, #16
 8004716:	4630      	mov	r0, r6
 8004718:	f3af 8000 	nop.w
 800471c:	4607      	mov	r7, r0
 800471e:	1c78      	adds	r0, r7, #1
 8004720:	d1d6      	bne.n	80046d0 <_vfiprintf_r+0x1bc>
 8004722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004724:	07d9      	lsls	r1, r3, #31
 8004726:	d405      	bmi.n	8004734 <_vfiprintf_r+0x220>
 8004728:	89ab      	ldrh	r3, [r5, #12]
 800472a:	059a      	lsls	r2, r3, #22
 800472c:	d402      	bmi.n	8004734 <_vfiprintf_r+0x220>
 800472e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004730:	f000 fc45 	bl	8004fbe <__retarget_lock_release_recursive>
 8004734:	89ab      	ldrh	r3, [r5, #12]
 8004736:	065b      	lsls	r3, r3, #25
 8004738:	f53f af12 	bmi.w	8004560 <_vfiprintf_r+0x4c>
 800473c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800473e:	e711      	b.n	8004564 <_vfiprintf_r+0x50>
 8004740:	ab03      	add	r3, sp, #12
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	462a      	mov	r2, r5
 8004746:	4b09      	ldr	r3, [pc, #36]	; (800476c <_vfiprintf_r+0x258>)
 8004748:	a904      	add	r1, sp, #16
 800474a:	4630      	mov	r0, r6
 800474c:	f000 f880 	bl	8004850 <_printf_i>
 8004750:	e7e4      	b.n	800471c <_vfiprintf_r+0x208>
 8004752:	bf00      	nop
 8004754:	08005620 	.word	0x08005620
 8004758:	08005640 	.word	0x08005640
 800475c:	08005600 	.word	0x08005600
 8004760:	080055ca 	.word	0x080055ca
 8004764:	080055d4 	.word	0x080055d4
 8004768:	00000000 	.word	0x00000000
 800476c:	080044ef 	.word	0x080044ef
 8004770:	080055d0 	.word	0x080055d0

08004774 <_printf_common>:
 8004774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004778:	4616      	mov	r6, r2
 800477a:	4699      	mov	r9, r3
 800477c:	688a      	ldr	r2, [r1, #8]
 800477e:	690b      	ldr	r3, [r1, #16]
 8004780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004784:	4293      	cmp	r3, r2
 8004786:	bfb8      	it	lt
 8004788:	4613      	movlt	r3, r2
 800478a:	6033      	str	r3, [r6, #0]
 800478c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004790:	4607      	mov	r7, r0
 8004792:	460c      	mov	r4, r1
 8004794:	b10a      	cbz	r2, 800479a <_printf_common+0x26>
 8004796:	3301      	adds	r3, #1
 8004798:	6033      	str	r3, [r6, #0]
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	0699      	lsls	r1, r3, #26
 800479e:	bf42      	ittt	mi
 80047a0:	6833      	ldrmi	r3, [r6, #0]
 80047a2:	3302      	addmi	r3, #2
 80047a4:	6033      	strmi	r3, [r6, #0]
 80047a6:	6825      	ldr	r5, [r4, #0]
 80047a8:	f015 0506 	ands.w	r5, r5, #6
 80047ac:	d106      	bne.n	80047bc <_printf_common+0x48>
 80047ae:	f104 0a19 	add.w	sl, r4, #25
 80047b2:	68e3      	ldr	r3, [r4, #12]
 80047b4:	6832      	ldr	r2, [r6, #0]
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	42ab      	cmp	r3, r5
 80047ba:	dc26      	bgt.n	800480a <_printf_common+0x96>
 80047bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047c0:	1e13      	subs	r3, r2, #0
 80047c2:	6822      	ldr	r2, [r4, #0]
 80047c4:	bf18      	it	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	0692      	lsls	r2, r2, #26
 80047ca:	d42b      	bmi.n	8004824 <_printf_common+0xb0>
 80047cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047d0:	4649      	mov	r1, r9
 80047d2:	4638      	mov	r0, r7
 80047d4:	47c0      	blx	r8
 80047d6:	3001      	adds	r0, #1
 80047d8:	d01e      	beq.n	8004818 <_printf_common+0xa4>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	68e5      	ldr	r5, [r4, #12]
 80047de:	6832      	ldr	r2, [r6, #0]
 80047e0:	f003 0306 	and.w	r3, r3, #6
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	bf08      	it	eq
 80047e8:	1aad      	subeq	r5, r5, r2
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	6922      	ldr	r2, [r4, #16]
 80047ee:	bf0c      	ite	eq
 80047f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047f4:	2500      	movne	r5, #0
 80047f6:	4293      	cmp	r3, r2
 80047f8:	bfc4      	itt	gt
 80047fa:	1a9b      	subgt	r3, r3, r2
 80047fc:	18ed      	addgt	r5, r5, r3
 80047fe:	2600      	movs	r6, #0
 8004800:	341a      	adds	r4, #26
 8004802:	42b5      	cmp	r5, r6
 8004804:	d11a      	bne.n	800483c <_printf_common+0xc8>
 8004806:	2000      	movs	r0, #0
 8004808:	e008      	b.n	800481c <_printf_common+0xa8>
 800480a:	2301      	movs	r3, #1
 800480c:	4652      	mov	r2, sl
 800480e:	4649      	mov	r1, r9
 8004810:	4638      	mov	r0, r7
 8004812:	47c0      	blx	r8
 8004814:	3001      	adds	r0, #1
 8004816:	d103      	bne.n	8004820 <_printf_common+0xac>
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004820:	3501      	adds	r5, #1
 8004822:	e7c6      	b.n	80047b2 <_printf_common+0x3e>
 8004824:	18e1      	adds	r1, r4, r3
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	2030      	movs	r0, #48	; 0x30
 800482a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800482e:	4422      	add	r2, r4
 8004830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004838:	3302      	adds	r3, #2
 800483a:	e7c7      	b.n	80047cc <_printf_common+0x58>
 800483c:	2301      	movs	r3, #1
 800483e:	4622      	mov	r2, r4
 8004840:	4649      	mov	r1, r9
 8004842:	4638      	mov	r0, r7
 8004844:	47c0      	blx	r8
 8004846:	3001      	adds	r0, #1
 8004848:	d0e6      	beq.n	8004818 <_printf_common+0xa4>
 800484a:	3601      	adds	r6, #1
 800484c:	e7d9      	b.n	8004802 <_printf_common+0x8e>
	...

08004850 <_printf_i>:
 8004850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	460c      	mov	r4, r1
 8004856:	4691      	mov	r9, r2
 8004858:	7e27      	ldrb	r7, [r4, #24]
 800485a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800485c:	2f78      	cmp	r7, #120	; 0x78
 800485e:	4680      	mov	r8, r0
 8004860:	469a      	mov	sl, r3
 8004862:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004866:	d807      	bhi.n	8004878 <_printf_i+0x28>
 8004868:	2f62      	cmp	r7, #98	; 0x62
 800486a:	d80a      	bhi.n	8004882 <_printf_i+0x32>
 800486c:	2f00      	cmp	r7, #0
 800486e:	f000 80d8 	beq.w	8004a22 <_printf_i+0x1d2>
 8004872:	2f58      	cmp	r7, #88	; 0x58
 8004874:	f000 80a3 	beq.w	80049be <_printf_i+0x16e>
 8004878:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800487c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004880:	e03a      	b.n	80048f8 <_printf_i+0xa8>
 8004882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004886:	2b15      	cmp	r3, #21
 8004888:	d8f6      	bhi.n	8004878 <_printf_i+0x28>
 800488a:	a001      	add	r0, pc, #4	; (adr r0, 8004890 <_printf_i+0x40>)
 800488c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004890:	080048e9 	.word	0x080048e9
 8004894:	080048fd 	.word	0x080048fd
 8004898:	08004879 	.word	0x08004879
 800489c:	08004879 	.word	0x08004879
 80048a0:	08004879 	.word	0x08004879
 80048a4:	08004879 	.word	0x08004879
 80048a8:	080048fd 	.word	0x080048fd
 80048ac:	08004879 	.word	0x08004879
 80048b0:	08004879 	.word	0x08004879
 80048b4:	08004879 	.word	0x08004879
 80048b8:	08004879 	.word	0x08004879
 80048bc:	08004a09 	.word	0x08004a09
 80048c0:	0800492d 	.word	0x0800492d
 80048c4:	080049eb 	.word	0x080049eb
 80048c8:	08004879 	.word	0x08004879
 80048cc:	08004879 	.word	0x08004879
 80048d0:	08004a2b 	.word	0x08004a2b
 80048d4:	08004879 	.word	0x08004879
 80048d8:	0800492d 	.word	0x0800492d
 80048dc:	08004879 	.word	0x08004879
 80048e0:	08004879 	.word	0x08004879
 80048e4:	080049f3 	.word	0x080049f3
 80048e8:	680b      	ldr	r3, [r1, #0]
 80048ea:	1d1a      	adds	r2, r3, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	600a      	str	r2, [r1, #0]
 80048f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0a3      	b.n	8004a44 <_printf_i+0x1f4>
 80048fc:	6825      	ldr	r5, [r4, #0]
 80048fe:	6808      	ldr	r0, [r1, #0]
 8004900:	062e      	lsls	r6, r5, #24
 8004902:	f100 0304 	add.w	r3, r0, #4
 8004906:	d50a      	bpl.n	800491e <_printf_i+0xce>
 8004908:	6805      	ldr	r5, [r0, #0]
 800490a:	600b      	str	r3, [r1, #0]
 800490c:	2d00      	cmp	r5, #0
 800490e:	da03      	bge.n	8004918 <_printf_i+0xc8>
 8004910:	232d      	movs	r3, #45	; 0x2d
 8004912:	426d      	negs	r5, r5
 8004914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004918:	485e      	ldr	r0, [pc, #376]	; (8004a94 <_printf_i+0x244>)
 800491a:	230a      	movs	r3, #10
 800491c:	e019      	b.n	8004952 <_printf_i+0x102>
 800491e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004922:	6805      	ldr	r5, [r0, #0]
 8004924:	600b      	str	r3, [r1, #0]
 8004926:	bf18      	it	ne
 8004928:	b22d      	sxthne	r5, r5
 800492a:	e7ef      	b.n	800490c <_printf_i+0xbc>
 800492c:	680b      	ldr	r3, [r1, #0]
 800492e:	6825      	ldr	r5, [r4, #0]
 8004930:	1d18      	adds	r0, r3, #4
 8004932:	6008      	str	r0, [r1, #0]
 8004934:	0628      	lsls	r0, r5, #24
 8004936:	d501      	bpl.n	800493c <_printf_i+0xec>
 8004938:	681d      	ldr	r5, [r3, #0]
 800493a:	e002      	b.n	8004942 <_printf_i+0xf2>
 800493c:	0669      	lsls	r1, r5, #25
 800493e:	d5fb      	bpl.n	8004938 <_printf_i+0xe8>
 8004940:	881d      	ldrh	r5, [r3, #0]
 8004942:	4854      	ldr	r0, [pc, #336]	; (8004a94 <_printf_i+0x244>)
 8004944:	2f6f      	cmp	r7, #111	; 0x6f
 8004946:	bf0c      	ite	eq
 8004948:	2308      	moveq	r3, #8
 800494a:	230a      	movne	r3, #10
 800494c:	2100      	movs	r1, #0
 800494e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004952:	6866      	ldr	r6, [r4, #4]
 8004954:	60a6      	str	r6, [r4, #8]
 8004956:	2e00      	cmp	r6, #0
 8004958:	bfa2      	ittt	ge
 800495a:	6821      	ldrge	r1, [r4, #0]
 800495c:	f021 0104 	bicge.w	r1, r1, #4
 8004960:	6021      	strge	r1, [r4, #0]
 8004962:	b90d      	cbnz	r5, 8004968 <_printf_i+0x118>
 8004964:	2e00      	cmp	r6, #0
 8004966:	d04d      	beq.n	8004a04 <_printf_i+0x1b4>
 8004968:	4616      	mov	r6, r2
 800496a:	fbb5 f1f3 	udiv	r1, r5, r3
 800496e:	fb03 5711 	mls	r7, r3, r1, r5
 8004972:	5dc7      	ldrb	r7, [r0, r7]
 8004974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004978:	462f      	mov	r7, r5
 800497a:	42bb      	cmp	r3, r7
 800497c:	460d      	mov	r5, r1
 800497e:	d9f4      	bls.n	800496a <_printf_i+0x11a>
 8004980:	2b08      	cmp	r3, #8
 8004982:	d10b      	bne.n	800499c <_printf_i+0x14c>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	07df      	lsls	r7, r3, #31
 8004988:	d508      	bpl.n	800499c <_printf_i+0x14c>
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	6861      	ldr	r1, [r4, #4]
 800498e:	4299      	cmp	r1, r3
 8004990:	bfde      	ittt	le
 8004992:	2330      	movle	r3, #48	; 0x30
 8004994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004998:	f106 36ff 	addle.w	r6, r6, #4294967295
 800499c:	1b92      	subs	r2, r2, r6
 800499e:	6122      	str	r2, [r4, #16]
 80049a0:	f8cd a000 	str.w	sl, [sp]
 80049a4:	464b      	mov	r3, r9
 80049a6:	aa03      	add	r2, sp, #12
 80049a8:	4621      	mov	r1, r4
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7ff fee2 	bl	8004774 <_printf_common>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d14c      	bne.n	8004a4e <_printf_i+0x1fe>
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	b004      	add	sp, #16
 80049ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049be:	4835      	ldr	r0, [pc, #212]	; (8004a94 <_printf_i+0x244>)
 80049c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	680e      	ldr	r6, [r1, #0]
 80049c8:	061f      	lsls	r7, r3, #24
 80049ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80049ce:	600e      	str	r6, [r1, #0]
 80049d0:	d514      	bpl.n	80049fc <_printf_i+0x1ac>
 80049d2:	07d9      	lsls	r1, r3, #31
 80049d4:	bf44      	itt	mi
 80049d6:	f043 0320 	orrmi.w	r3, r3, #32
 80049da:	6023      	strmi	r3, [r4, #0]
 80049dc:	b91d      	cbnz	r5, 80049e6 <_printf_i+0x196>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	f023 0320 	bic.w	r3, r3, #32
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	2310      	movs	r3, #16
 80049e8:	e7b0      	b.n	800494c <_printf_i+0xfc>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	f043 0320 	orr.w	r3, r3, #32
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	2378      	movs	r3, #120	; 0x78
 80049f4:	4828      	ldr	r0, [pc, #160]	; (8004a98 <_printf_i+0x248>)
 80049f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049fa:	e7e3      	b.n	80049c4 <_printf_i+0x174>
 80049fc:	065e      	lsls	r6, r3, #25
 80049fe:	bf48      	it	mi
 8004a00:	b2ad      	uxthmi	r5, r5
 8004a02:	e7e6      	b.n	80049d2 <_printf_i+0x182>
 8004a04:	4616      	mov	r6, r2
 8004a06:	e7bb      	b.n	8004980 <_printf_i+0x130>
 8004a08:	680b      	ldr	r3, [r1, #0]
 8004a0a:	6826      	ldr	r6, [r4, #0]
 8004a0c:	6960      	ldr	r0, [r4, #20]
 8004a0e:	1d1d      	adds	r5, r3, #4
 8004a10:	600d      	str	r5, [r1, #0]
 8004a12:	0635      	lsls	r5, r6, #24
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	d501      	bpl.n	8004a1c <_printf_i+0x1cc>
 8004a18:	6018      	str	r0, [r3, #0]
 8004a1a:	e002      	b.n	8004a22 <_printf_i+0x1d2>
 8004a1c:	0671      	lsls	r1, r6, #25
 8004a1e:	d5fb      	bpl.n	8004a18 <_printf_i+0x1c8>
 8004a20:	8018      	strh	r0, [r3, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	4616      	mov	r6, r2
 8004a28:	e7ba      	b.n	80049a0 <_printf_i+0x150>
 8004a2a:	680b      	ldr	r3, [r1, #0]
 8004a2c:	1d1a      	adds	r2, r3, #4
 8004a2e:	600a      	str	r2, [r1, #0]
 8004a30:	681e      	ldr	r6, [r3, #0]
 8004a32:	6862      	ldr	r2, [r4, #4]
 8004a34:	2100      	movs	r1, #0
 8004a36:	4630      	mov	r0, r6
 8004a38:	f7fb fbd2 	bl	80001e0 <memchr>
 8004a3c:	b108      	cbz	r0, 8004a42 <_printf_i+0x1f2>
 8004a3e:	1b80      	subs	r0, r0, r6
 8004a40:	6060      	str	r0, [r4, #4]
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	6123      	str	r3, [r4, #16]
 8004a46:	2300      	movs	r3, #0
 8004a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a4c:	e7a8      	b.n	80049a0 <_printf_i+0x150>
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	4632      	mov	r2, r6
 8004a52:	4649      	mov	r1, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	47d0      	blx	sl
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d0ab      	beq.n	80049b4 <_printf_i+0x164>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	079b      	lsls	r3, r3, #30
 8004a60:	d413      	bmi.n	8004a8a <_printf_i+0x23a>
 8004a62:	68e0      	ldr	r0, [r4, #12]
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	4298      	cmp	r0, r3
 8004a68:	bfb8      	it	lt
 8004a6a:	4618      	movlt	r0, r3
 8004a6c:	e7a4      	b.n	80049b8 <_printf_i+0x168>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4632      	mov	r2, r6
 8004a72:	4649      	mov	r1, r9
 8004a74:	4640      	mov	r0, r8
 8004a76:	47d0      	blx	sl
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d09b      	beq.n	80049b4 <_printf_i+0x164>
 8004a7c:	3501      	adds	r5, #1
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	9903      	ldr	r1, [sp, #12]
 8004a82:	1a5b      	subs	r3, r3, r1
 8004a84:	42ab      	cmp	r3, r5
 8004a86:	dcf2      	bgt.n	8004a6e <_printf_i+0x21e>
 8004a88:	e7eb      	b.n	8004a62 <_printf_i+0x212>
 8004a8a:	2500      	movs	r5, #0
 8004a8c:	f104 0619 	add.w	r6, r4, #25
 8004a90:	e7f5      	b.n	8004a7e <_printf_i+0x22e>
 8004a92:	bf00      	nop
 8004a94:	080055db 	.word	0x080055db
 8004a98:	080055ec 	.word	0x080055ec

08004a9c <_sbrk_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4d06      	ldr	r5, [pc, #24]	; (8004ab8 <_sbrk_r+0x1c>)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	602b      	str	r3, [r5, #0]
 8004aa8:	f7fd fc42 	bl	8002330 <_sbrk>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d102      	bne.n	8004ab6 <_sbrk_r+0x1a>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b103      	cbz	r3, 8004ab6 <_sbrk_r+0x1a>
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	200009c8 	.word	0x200009c8

08004abc <__swbuf_r>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	460e      	mov	r6, r1
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	b118      	cbz	r0, 8004ace <__swbuf_r+0x12>
 8004ac6:	6983      	ldr	r3, [r0, #24]
 8004ac8:	b90b      	cbnz	r3, 8004ace <__swbuf_r+0x12>
 8004aca:	f000 f9d9 	bl	8004e80 <__sinit>
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <__swbuf_r+0x98>)
 8004ad0:	429c      	cmp	r4, r3
 8004ad2:	d12b      	bne.n	8004b2c <__swbuf_r+0x70>
 8004ad4:	686c      	ldr	r4, [r5, #4]
 8004ad6:	69a3      	ldr	r3, [r4, #24]
 8004ad8:	60a3      	str	r3, [r4, #8]
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	071a      	lsls	r2, r3, #28
 8004ade:	d52f      	bpl.n	8004b40 <__swbuf_r+0x84>
 8004ae0:	6923      	ldr	r3, [r4, #16]
 8004ae2:	b36b      	cbz	r3, 8004b40 <__swbuf_r+0x84>
 8004ae4:	6923      	ldr	r3, [r4, #16]
 8004ae6:	6820      	ldr	r0, [r4, #0]
 8004ae8:	1ac0      	subs	r0, r0, r3
 8004aea:	6963      	ldr	r3, [r4, #20]
 8004aec:	b2f6      	uxtb	r6, r6
 8004aee:	4283      	cmp	r3, r0
 8004af0:	4637      	mov	r7, r6
 8004af2:	dc04      	bgt.n	8004afe <__swbuf_r+0x42>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	f000 f92e 	bl	8004d58 <_fflush_r>
 8004afc:	bb30      	cbnz	r0, 8004b4c <__swbuf_r+0x90>
 8004afe:	68a3      	ldr	r3, [r4, #8]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	60a3      	str	r3, [r4, #8]
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	701e      	strb	r6, [r3, #0]
 8004b0c:	6963      	ldr	r3, [r4, #20]
 8004b0e:	3001      	adds	r0, #1
 8004b10:	4283      	cmp	r3, r0
 8004b12:	d004      	beq.n	8004b1e <__swbuf_r+0x62>
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	07db      	lsls	r3, r3, #31
 8004b18:	d506      	bpl.n	8004b28 <__swbuf_r+0x6c>
 8004b1a:	2e0a      	cmp	r6, #10
 8004b1c:	d104      	bne.n	8004b28 <__swbuf_r+0x6c>
 8004b1e:	4621      	mov	r1, r4
 8004b20:	4628      	mov	r0, r5
 8004b22:	f000 f919 	bl	8004d58 <_fflush_r>
 8004b26:	b988      	cbnz	r0, 8004b4c <__swbuf_r+0x90>
 8004b28:	4638      	mov	r0, r7
 8004b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <__swbuf_r+0x9c>)
 8004b2e:	429c      	cmp	r4, r3
 8004b30:	d101      	bne.n	8004b36 <__swbuf_r+0x7a>
 8004b32:	68ac      	ldr	r4, [r5, #8]
 8004b34:	e7cf      	b.n	8004ad6 <__swbuf_r+0x1a>
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <__swbuf_r+0xa0>)
 8004b38:	429c      	cmp	r4, r3
 8004b3a:	bf08      	it	eq
 8004b3c:	68ec      	ldreq	r4, [r5, #12]
 8004b3e:	e7ca      	b.n	8004ad6 <__swbuf_r+0x1a>
 8004b40:	4621      	mov	r1, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f80c 	bl	8004b60 <__swsetup_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d0cb      	beq.n	8004ae4 <__swbuf_r+0x28>
 8004b4c:	f04f 37ff 	mov.w	r7, #4294967295
 8004b50:	e7ea      	b.n	8004b28 <__swbuf_r+0x6c>
 8004b52:	bf00      	nop
 8004b54:	08005620 	.word	0x08005620
 8004b58:	08005640 	.word	0x08005640
 8004b5c:	08005600 	.word	0x08005600

08004b60 <__swsetup_r>:
 8004b60:	4b32      	ldr	r3, [pc, #200]	; (8004c2c <__swsetup_r+0xcc>)
 8004b62:	b570      	push	{r4, r5, r6, lr}
 8004b64:	681d      	ldr	r5, [r3, #0]
 8004b66:	4606      	mov	r6, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	b125      	cbz	r5, 8004b76 <__swsetup_r+0x16>
 8004b6c:	69ab      	ldr	r3, [r5, #24]
 8004b6e:	b913      	cbnz	r3, 8004b76 <__swsetup_r+0x16>
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f985 	bl	8004e80 <__sinit>
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <__swsetup_r+0xd0>)
 8004b78:	429c      	cmp	r4, r3
 8004b7a:	d10f      	bne.n	8004b9c <__swsetup_r+0x3c>
 8004b7c:	686c      	ldr	r4, [r5, #4]
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b84:	0719      	lsls	r1, r3, #28
 8004b86:	d42c      	bmi.n	8004be2 <__swsetup_r+0x82>
 8004b88:	06dd      	lsls	r5, r3, #27
 8004b8a:	d411      	bmi.n	8004bb0 <__swsetup_r+0x50>
 8004b8c:	2309      	movs	r3, #9
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b94:	81a3      	strh	r3, [r4, #12]
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9a:	e03e      	b.n	8004c1a <__swsetup_r+0xba>
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <__swsetup_r+0xd4>)
 8004b9e:	429c      	cmp	r4, r3
 8004ba0:	d101      	bne.n	8004ba6 <__swsetup_r+0x46>
 8004ba2:	68ac      	ldr	r4, [r5, #8]
 8004ba4:	e7eb      	b.n	8004b7e <__swsetup_r+0x1e>
 8004ba6:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <__swsetup_r+0xd8>)
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	bf08      	it	eq
 8004bac:	68ec      	ldreq	r4, [r5, #12]
 8004bae:	e7e6      	b.n	8004b7e <__swsetup_r+0x1e>
 8004bb0:	0758      	lsls	r0, r3, #29
 8004bb2:	d512      	bpl.n	8004bda <__swsetup_r+0x7a>
 8004bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bb6:	b141      	cbz	r1, 8004bca <__swsetup_r+0x6a>
 8004bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bbc:	4299      	cmp	r1, r3
 8004bbe:	d002      	beq.n	8004bc6 <__swsetup_r+0x66>
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f7ff fbd3 	bl	800436c <_free_r>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	89a3      	ldrh	r3, [r4, #12]
 8004bdc:	f043 0308 	orr.w	r3, r3, #8
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	b94b      	cbnz	r3, 8004bfa <__swsetup_r+0x9a>
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf0:	d003      	beq.n	8004bfa <__swsetup_r+0x9a>
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 fa07 	bl	8005008 <__smakebuf_r>
 8004bfa:	89a0      	ldrh	r0, [r4, #12]
 8004bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c00:	f010 0301 	ands.w	r3, r0, #1
 8004c04:	d00a      	beq.n	8004c1c <__swsetup_r+0xbc>
 8004c06:	2300      	movs	r3, #0
 8004c08:	60a3      	str	r3, [r4, #8]
 8004c0a:	6963      	ldr	r3, [r4, #20]
 8004c0c:	425b      	negs	r3, r3
 8004c0e:	61a3      	str	r3, [r4, #24]
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	b943      	cbnz	r3, 8004c26 <__swsetup_r+0xc6>
 8004c14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c18:	d1ba      	bne.n	8004b90 <__swsetup_r+0x30>
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	0781      	lsls	r1, r0, #30
 8004c1e:	bf58      	it	pl
 8004c20:	6963      	ldrpl	r3, [r4, #20]
 8004c22:	60a3      	str	r3, [r4, #8]
 8004c24:	e7f4      	b.n	8004c10 <__swsetup_r+0xb0>
 8004c26:	2000      	movs	r0, #0
 8004c28:	e7f7      	b.n	8004c1a <__swsetup_r+0xba>
 8004c2a:	bf00      	nop
 8004c2c:	20000010 	.word	0x20000010
 8004c30:	08005620 	.word	0x08005620
 8004c34:	08005640 	.word	0x08005640
 8004c38:	08005600 	.word	0x08005600

08004c3c <abort>:
 8004c3c:	b508      	push	{r3, lr}
 8004c3e:	2006      	movs	r0, #6
 8004c40:	f000 fa56 	bl	80050f0 <raise>
 8004c44:	2001      	movs	r0, #1
 8004c46:	f7fd fafb 	bl	8002240 <_exit>
	...

08004c4c <__sflush_r>:
 8004c4c:	898a      	ldrh	r2, [r1, #12]
 8004c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c52:	4605      	mov	r5, r0
 8004c54:	0710      	lsls	r0, r2, #28
 8004c56:	460c      	mov	r4, r1
 8004c58:	d458      	bmi.n	8004d0c <__sflush_r+0xc0>
 8004c5a:	684b      	ldr	r3, [r1, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	dc05      	bgt.n	8004c6c <__sflush_r+0x20>
 8004c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	dc02      	bgt.n	8004c6c <__sflush_r+0x20>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c6e:	2e00      	cmp	r6, #0
 8004c70:	d0f9      	beq.n	8004c66 <__sflush_r+0x1a>
 8004c72:	2300      	movs	r3, #0
 8004c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c78:	682f      	ldr	r7, [r5, #0]
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	d032      	beq.n	8004ce4 <__sflush_r+0x98>
 8004c7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	075a      	lsls	r2, r3, #29
 8004c84:	d505      	bpl.n	8004c92 <__sflush_r+0x46>
 8004c86:	6863      	ldr	r3, [r4, #4]
 8004c88:	1ac0      	subs	r0, r0, r3
 8004c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c8c:	b10b      	cbz	r3, 8004c92 <__sflush_r+0x46>
 8004c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c90:	1ac0      	subs	r0, r0, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	4602      	mov	r2, r0
 8004c96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c98:	6a21      	ldr	r1, [r4, #32]
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b0      	blx	r6
 8004c9e:	1c43      	adds	r3, r0, #1
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	d106      	bne.n	8004cb2 <__sflush_r+0x66>
 8004ca4:	6829      	ldr	r1, [r5, #0]
 8004ca6:	291d      	cmp	r1, #29
 8004ca8:	d82c      	bhi.n	8004d04 <__sflush_r+0xb8>
 8004caa:	4a2a      	ldr	r2, [pc, #168]	; (8004d54 <__sflush_r+0x108>)
 8004cac:	40ca      	lsrs	r2, r1
 8004cae:	07d6      	lsls	r6, r2, #31
 8004cb0:	d528      	bpl.n	8004d04 <__sflush_r+0xb8>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	6062      	str	r2, [r4, #4]
 8004cb6:	04d9      	lsls	r1, r3, #19
 8004cb8:	6922      	ldr	r2, [r4, #16]
 8004cba:	6022      	str	r2, [r4, #0]
 8004cbc:	d504      	bpl.n	8004cc8 <__sflush_r+0x7c>
 8004cbe:	1c42      	adds	r2, r0, #1
 8004cc0:	d101      	bne.n	8004cc6 <__sflush_r+0x7a>
 8004cc2:	682b      	ldr	r3, [r5, #0]
 8004cc4:	b903      	cbnz	r3, 8004cc8 <__sflush_r+0x7c>
 8004cc6:	6560      	str	r0, [r4, #84]	; 0x54
 8004cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cca:	602f      	str	r7, [r5, #0]
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	d0ca      	beq.n	8004c66 <__sflush_r+0x1a>
 8004cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	d002      	beq.n	8004cde <__sflush_r+0x92>
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f7ff fb47 	bl	800436c <_free_r>
 8004cde:	2000      	movs	r0, #0
 8004ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ce2:	e7c1      	b.n	8004c68 <__sflush_r+0x1c>
 8004ce4:	6a21      	ldr	r1, [r4, #32]
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4628      	mov	r0, r5
 8004cea:	47b0      	blx	r6
 8004cec:	1c41      	adds	r1, r0, #1
 8004cee:	d1c7      	bne.n	8004c80 <__sflush_r+0x34>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0c4      	beq.n	8004c80 <__sflush_r+0x34>
 8004cf6:	2b1d      	cmp	r3, #29
 8004cf8:	d001      	beq.n	8004cfe <__sflush_r+0xb2>
 8004cfa:	2b16      	cmp	r3, #22
 8004cfc:	d101      	bne.n	8004d02 <__sflush_r+0xb6>
 8004cfe:	602f      	str	r7, [r5, #0]
 8004d00:	e7b1      	b.n	8004c66 <__sflush_r+0x1a>
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d08:	81a3      	strh	r3, [r4, #12]
 8004d0a:	e7ad      	b.n	8004c68 <__sflush_r+0x1c>
 8004d0c:	690f      	ldr	r7, [r1, #16]
 8004d0e:	2f00      	cmp	r7, #0
 8004d10:	d0a9      	beq.n	8004c66 <__sflush_r+0x1a>
 8004d12:	0793      	lsls	r3, r2, #30
 8004d14:	680e      	ldr	r6, [r1, #0]
 8004d16:	bf08      	it	eq
 8004d18:	694b      	ldreq	r3, [r1, #20]
 8004d1a:	600f      	str	r7, [r1, #0]
 8004d1c:	bf18      	it	ne
 8004d1e:	2300      	movne	r3, #0
 8004d20:	eba6 0807 	sub.w	r8, r6, r7
 8004d24:	608b      	str	r3, [r1, #8]
 8004d26:	f1b8 0f00 	cmp.w	r8, #0
 8004d2a:	dd9c      	ble.n	8004c66 <__sflush_r+0x1a>
 8004d2c:	6a21      	ldr	r1, [r4, #32]
 8004d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d30:	4643      	mov	r3, r8
 8004d32:	463a      	mov	r2, r7
 8004d34:	4628      	mov	r0, r5
 8004d36:	47b0      	blx	r6
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	dc06      	bgt.n	8004d4a <__sflush_r+0xfe>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d42:	81a3      	strh	r3, [r4, #12]
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	e78e      	b.n	8004c68 <__sflush_r+0x1c>
 8004d4a:	4407      	add	r7, r0
 8004d4c:	eba8 0800 	sub.w	r8, r8, r0
 8004d50:	e7e9      	b.n	8004d26 <__sflush_r+0xda>
 8004d52:	bf00      	nop
 8004d54:	20400001 	.word	0x20400001

08004d58 <_fflush_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	690b      	ldr	r3, [r1, #16]
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	b913      	cbnz	r3, 8004d68 <_fflush_r+0x10>
 8004d62:	2500      	movs	r5, #0
 8004d64:	4628      	mov	r0, r5
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	b118      	cbz	r0, 8004d72 <_fflush_r+0x1a>
 8004d6a:	6983      	ldr	r3, [r0, #24]
 8004d6c:	b90b      	cbnz	r3, 8004d72 <_fflush_r+0x1a>
 8004d6e:	f000 f887 	bl	8004e80 <__sinit>
 8004d72:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <_fflush_r+0x6c>)
 8004d74:	429c      	cmp	r4, r3
 8004d76:	d11b      	bne.n	8004db0 <_fflush_r+0x58>
 8004d78:	686c      	ldr	r4, [r5, #4]
 8004d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0ef      	beq.n	8004d62 <_fflush_r+0xa>
 8004d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d84:	07d0      	lsls	r0, r2, #31
 8004d86:	d404      	bmi.n	8004d92 <_fflush_r+0x3a>
 8004d88:	0599      	lsls	r1, r3, #22
 8004d8a:	d402      	bmi.n	8004d92 <_fflush_r+0x3a>
 8004d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8e:	f000 f915 	bl	8004fbc <__retarget_lock_acquire_recursive>
 8004d92:	4628      	mov	r0, r5
 8004d94:	4621      	mov	r1, r4
 8004d96:	f7ff ff59 	bl	8004c4c <__sflush_r>
 8004d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d9c:	07da      	lsls	r2, r3, #31
 8004d9e:	4605      	mov	r5, r0
 8004da0:	d4e0      	bmi.n	8004d64 <_fflush_r+0xc>
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	059b      	lsls	r3, r3, #22
 8004da6:	d4dd      	bmi.n	8004d64 <_fflush_r+0xc>
 8004da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004daa:	f000 f908 	bl	8004fbe <__retarget_lock_release_recursive>
 8004dae:	e7d9      	b.n	8004d64 <_fflush_r+0xc>
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <_fflush_r+0x70>)
 8004db2:	429c      	cmp	r4, r3
 8004db4:	d101      	bne.n	8004dba <_fflush_r+0x62>
 8004db6:	68ac      	ldr	r4, [r5, #8]
 8004db8:	e7df      	b.n	8004d7a <_fflush_r+0x22>
 8004dba:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <_fflush_r+0x74>)
 8004dbc:	429c      	cmp	r4, r3
 8004dbe:	bf08      	it	eq
 8004dc0:	68ec      	ldreq	r4, [r5, #12]
 8004dc2:	e7da      	b.n	8004d7a <_fflush_r+0x22>
 8004dc4:	08005620 	.word	0x08005620
 8004dc8:	08005640 	.word	0x08005640
 8004dcc:	08005600 	.word	0x08005600

08004dd0 <std>:
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8004dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dde:	6083      	str	r3, [r0, #8]
 8004de0:	8181      	strh	r1, [r0, #12]
 8004de2:	6643      	str	r3, [r0, #100]	; 0x64
 8004de4:	81c2      	strh	r2, [r0, #14]
 8004de6:	6183      	str	r3, [r0, #24]
 8004de8:	4619      	mov	r1, r3
 8004dea:	2208      	movs	r2, #8
 8004dec:	305c      	adds	r0, #92	; 0x5c
 8004dee:	f7ff fa3d 	bl	800426c <memset>
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <std+0x38>)
 8004df4:	6263      	str	r3, [r4, #36]	; 0x24
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <std+0x3c>)
 8004df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <std+0x40>)
 8004dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <std+0x44>)
 8004e00:	6224      	str	r4, [r4, #32]
 8004e02:	6323      	str	r3, [r4, #48]	; 0x30
 8004e04:	bd10      	pop	{r4, pc}
 8004e06:	bf00      	nop
 8004e08:	08005129 	.word	0x08005129
 8004e0c:	0800514b 	.word	0x0800514b
 8004e10:	08005183 	.word	0x08005183
 8004e14:	080051a7 	.word	0x080051a7

08004e18 <_cleanup_r>:
 8004e18:	4901      	ldr	r1, [pc, #4]	; (8004e20 <_cleanup_r+0x8>)
 8004e1a:	f000 b8af 	b.w	8004f7c <_fwalk_reent>
 8004e1e:	bf00      	nop
 8004e20:	08004d59 	.word	0x08004d59

08004e24 <__sfmoreglue>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	1e4a      	subs	r2, r1, #1
 8004e28:	2568      	movs	r5, #104	; 0x68
 8004e2a:	4355      	muls	r5, r2
 8004e2c:	460e      	mov	r6, r1
 8004e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e32:	f7ff faeb 	bl	800440c <_malloc_r>
 8004e36:	4604      	mov	r4, r0
 8004e38:	b140      	cbz	r0, 8004e4c <__sfmoreglue+0x28>
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8004e40:	300c      	adds	r0, #12
 8004e42:	60a0      	str	r0, [r4, #8]
 8004e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e48:	f7ff fa10 	bl	800426c <memset>
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}

08004e50 <__sfp_lock_acquire>:
 8004e50:	4801      	ldr	r0, [pc, #4]	; (8004e58 <__sfp_lock_acquire+0x8>)
 8004e52:	f000 b8b3 	b.w	8004fbc <__retarget_lock_acquire_recursive>
 8004e56:	bf00      	nop
 8004e58:	200009c4 	.word	0x200009c4

08004e5c <__sfp_lock_release>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__sfp_lock_release+0x8>)
 8004e5e:	f000 b8ae 	b.w	8004fbe <__retarget_lock_release_recursive>
 8004e62:	bf00      	nop
 8004e64:	200009c4 	.word	0x200009c4

08004e68 <__sinit_lock_acquire>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__sinit_lock_acquire+0x8>)
 8004e6a:	f000 b8a7 	b.w	8004fbc <__retarget_lock_acquire_recursive>
 8004e6e:	bf00      	nop
 8004e70:	200009bf 	.word	0x200009bf

08004e74 <__sinit_lock_release>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__sinit_lock_release+0x8>)
 8004e76:	f000 b8a2 	b.w	8004fbe <__retarget_lock_release_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	200009bf 	.word	0x200009bf

08004e80 <__sinit>:
 8004e80:	b510      	push	{r4, lr}
 8004e82:	4604      	mov	r4, r0
 8004e84:	f7ff fff0 	bl	8004e68 <__sinit_lock_acquire>
 8004e88:	69a3      	ldr	r3, [r4, #24]
 8004e8a:	b11b      	cbz	r3, 8004e94 <__sinit+0x14>
 8004e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e90:	f7ff bff0 	b.w	8004e74 <__sinit_lock_release>
 8004e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e98:	6523      	str	r3, [r4, #80]	; 0x50
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <__sinit+0x68>)
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <__sinit+0x6c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	bf04      	itt	eq
 8004ea6:	2301      	moveq	r3, #1
 8004ea8:	61a3      	streq	r3, [r4, #24]
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f000 f820 	bl	8004ef0 <__sfp>
 8004eb0:	6060      	str	r0, [r4, #4]
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f000 f81c 	bl	8004ef0 <__sfp>
 8004eb8:	60a0      	str	r0, [r4, #8]
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 f818 	bl	8004ef0 <__sfp>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	60e0      	str	r0, [r4, #12]
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	6860      	ldr	r0, [r4, #4]
 8004ec8:	f7ff ff82 	bl	8004dd0 <std>
 8004ecc:	68a0      	ldr	r0, [r4, #8]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	2109      	movs	r1, #9
 8004ed2:	f7ff ff7d 	bl	8004dd0 <std>
 8004ed6:	68e0      	ldr	r0, [r4, #12]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	2112      	movs	r1, #18
 8004edc:	f7ff ff78 	bl	8004dd0 <std>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61a3      	str	r3, [r4, #24]
 8004ee4:	e7d2      	b.n	8004e8c <__sinit+0xc>
 8004ee6:	bf00      	nop
 8004ee8:	08005514 	.word	0x08005514
 8004eec:	08004e19 	.word	0x08004e19

08004ef0 <__sfp>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	4607      	mov	r7, r0
 8004ef4:	f7ff ffac 	bl	8004e50 <__sfp_lock_acquire>
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <__sfp+0x84>)
 8004efa:	681e      	ldr	r6, [r3, #0]
 8004efc:	69b3      	ldr	r3, [r6, #24]
 8004efe:	b913      	cbnz	r3, 8004f06 <__sfp+0x16>
 8004f00:	4630      	mov	r0, r6
 8004f02:	f7ff ffbd 	bl	8004e80 <__sinit>
 8004f06:	3648      	adds	r6, #72	; 0x48
 8004f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	d503      	bpl.n	8004f18 <__sfp+0x28>
 8004f10:	6833      	ldr	r3, [r6, #0]
 8004f12:	b30b      	cbz	r3, 8004f58 <__sfp+0x68>
 8004f14:	6836      	ldr	r6, [r6, #0]
 8004f16:	e7f7      	b.n	8004f08 <__sfp+0x18>
 8004f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f1c:	b9d5      	cbnz	r5, 8004f54 <__sfp+0x64>
 8004f1e:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <__sfp+0x88>)
 8004f20:	60e3      	str	r3, [r4, #12]
 8004f22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f26:	6665      	str	r5, [r4, #100]	; 0x64
 8004f28:	f000 f847 	bl	8004fba <__retarget_lock_init_recursive>
 8004f2c:	f7ff ff96 	bl	8004e5c <__sfp_lock_release>
 8004f30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f38:	6025      	str	r5, [r4, #0]
 8004f3a:	61a5      	str	r5, [r4, #24]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	4629      	mov	r1, r5
 8004f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f44:	f7ff f992 	bl	800426c <memset>
 8004f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f50:	4620      	mov	r0, r4
 8004f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f54:	3468      	adds	r4, #104	; 0x68
 8004f56:	e7d9      	b.n	8004f0c <__sfp+0x1c>
 8004f58:	2104      	movs	r1, #4
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	f7ff ff62 	bl	8004e24 <__sfmoreglue>
 8004f60:	4604      	mov	r4, r0
 8004f62:	6030      	str	r0, [r6, #0]
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d1d5      	bne.n	8004f14 <__sfp+0x24>
 8004f68:	f7ff ff78 	bl	8004e5c <__sfp_lock_release>
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	e7ee      	b.n	8004f50 <__sfp+0x60>
 8004f72:	bf00      	nop
 8004f74:	08005514 	.word	0x08005514
 8004f78:	ffff0001 	.word	0xffff0001

08004f7c <_fwalk_reent>:
 8004f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	4606      	mov	r6, r0
 8004f82:	4688      	mov	r8, r1
 8004f84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f88:	2700      	movs	r7, #0
 8004f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8004f92:	d505      	bpl.n	8004fa0 <_fwalk_reent+0x24>
 8004f94:	6824      	ldr	r4, [r4, #0]
 8004f96:	2c00      	cmp	r4, #0
 8004f98:	d1f7      	bne.n	8004f8a <_fwalk_reent+0xe>
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa0:	89ab      	ldrh	r3, [r5, #12]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d907      	bls.n	8004fb6 <_fwalk_reent+0x3a>
 8004fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004faa:	3301      	adds	r3, #1
 8004fac:	d003      	beq.n	8004fb6 <_fwalk_reent+0x3a>
 8004fae:	4629      	mov	r1, r5
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	47c0      	blx	r8
 8004fb4:	4307      	orrs	r7, r0
 8004fb6:	3568      	adds	r5, #104	; 0x68
 8004fb8:	e7e9      	b.n	8004f8e <_fwalk_reent+0x12>

08004fba <__retarget_lock_init_recursive>:
 8004fba:	4770      	bx	lr

08004fbc <__retarget_lock_acquire_recursive>:
 8004fbc:	4770      	bx	lr

08004fbe <__retarget_lock_release_recursive>:
 8004fbe:	4770      	bx	lr

08004fc0 <__swhatbuf_r>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	460e      	mov	r6, r1
 8004fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	b096      	sub	sp, #88	; 0x58
 8004fcc:	4614      	mov	r4, r2
 8004fce:	461d      	mov	r5, r3
 8004fd0:	da07      	bge.n	8004fe2 <__swhatbuf_r+0x22>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	602b      	str	r3, [r5, #0]
 8004fd6:	89b3      	ldrh	r3, [r6, #12]
 8004fd8:	061a      	lsls	r2, r3, #24
 8004fda:	d410      	bmi.n	8004ffe <__swhatbuf_r+0x3e>
 8004fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe0:	e00e      	b.n	8005000 <__swhatbuf_r+0x40>
 8004fe2:	466a      	mov	r2, sp
 8004fe4:	f000 f906 	bl	80051f4 <_fstat_r>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	dbf2      	blt.n	8004fd2 <__swhatbuf_r+0x12>
 8004fec:	9a01      	ldr	r2, [sp, #4]
 8004fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ff6:	425a      	negs	r2, r3
 8004ff8:	415a      	adcs	r2, r3
 8004ffa:	602a      	str	r2, [r5, #0]
 8004ffc:	e7ee      	b.n	8004fdc <__swhatbuf_r+0x1c>
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	2000      	movs	r0, #0
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	b016      	add	sp, #88	; 0x58
 8005006:	bd70      	pop	{r4, r5, r6, pc}

08005008 <__smakebuf_r>:
 8005008:	898b      	ldrh	r3, [r1, #12]
 800500a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800500c:	079d      	lsls	r5, r3, #30
 800500e:	4606      	mov	r6, r0
 8005010:	460c      	mov	r4, r1
 8005012:	d507      	bpl.n	8005024 <__smakebuf_r+0x1c>
 8005014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	2301      	movs	r3, #1
 800501e:	6163      	str	r3, [r4, #20]
 8005020:	b002      	add	sp, #8
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	ab01      	add	r3, sp, #4
 8005026:	466a      	mov	r2, sp
 8005028:	f7ff ffca 	bl	8004fc0 <__swhatbuf_r>
 800502c:	9900      	ldr	r1, [sp, #0]
 800502e:	4605      	mov	r5, r0
 8005030:	4630      	mov	r0, r6
 8005032:	f7ff f9eb 	bl	800440c <_malloc_r>
 8005036:	b948      	cbnz	r0, 800504c <__smakebuf_r+0x44>
 8005038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800503c:	059a      	lsls	r2, r3, #22
 800503e:	d4ef      	bmi.n	8005020 <__smakebuf_r+0x18>
 8005040:	f023 0303 	bic.w	r3, r3, #3
 8005044:	f043 0302 	orr.w	r3, r3, #2
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	e7e3      	b.n	8005014 <__smakebuf_r+0xc>
 800504c:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <__smakebuf_r+0x7c>)
 800504e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	81a3      	strh	r3, [r4, #12]
 800505a:	9b00      	ldr	r3, [sp, #0]
 800505c:	6163      	str	r3, [r4, #20]
 800505e:	9b01      	ldr	r3, [sp, #4]
 8005060:	6120      	str	r0, [r4, #16]
 8005062:	b15b      	cbz	r3, 800507c <__smakebuf_r+0x74>
 8005064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005068:	4630      	mov	r0, r6
 800506a:	f000 f8d5 	bl	8005218 <_isatty_r>
 800506e:	b128      	cbz	r0, 800507c <__smakebuf_r+0x74>
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	81a3      	strh	r3, [r4, #12]
 800507c:	89a0      	ldrh	r0, [r4, #12]
 800507e:	4305      	orrs	r5, r0
 8005080:	81a5      	strh	r5, [r4, #12]
 8005082:	e7cd      	b.n	8005020 <__smakebuf_r+0x18>
 8005084:	08004e19 	.word	0x08004e19

08005088 <__malloc_lock>:
 8005088:	4801      	ldr	r0, [pc, #4]	; (8005090 <__malloc_lock+0x8>)
 800508a:	f7ff bf97 	b.w	8004fbc <__retarget_lock_acquire_recursive>
 800508e:	bf00      	nop
 8005090:	200009c0 	.word	0x200009c0

08005094 <__malloc_unlock>:
 8005094:	4801      	ldr	r0, [pc, #4]	; (800509c <__malloc_unlock+0x8>)
 8005096:	f7ff bf92 	b.w	8004fbe <__retarget_lock_release_recursive>
 800509a:	bf00      	nop
 800509c:	200009c0 	.word	0x200009c0

080050a0 <_raise_r>:
 80050a0:	291f      	cmp	r1, #31
 80050a2:	b538      	push	{r3, r4, r5, lr}
 80050a4:	4604      	mov	r4, r0
 80050a6:	460d      	mov	r5, r1
 80050a8:	d904      	bls.n	80050b4 <_raise_r+0x14>
 80050aa:	2316      	movs	r3, #22
 80050ac:	6003      	str	r3, [r0, #0]
 80050ae:	f04f 30ff 	mov.w	r0, #4294967295
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80050b6:	b112      	cbz	r2, 80050be <_raise_r+0x1e>
 80050b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80050bc:	b94b      	cbnz	r3, 80050d2 <_raise_r+0x32>
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 f830 	bl	8005124 <_getpid_r>
 80050c4:	462a      	mov	r2, r5
 80050c6:	4601      	mov	r1, r0
 80050c8:	4620      	mov	r0, r4
 80050ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050ce:	f000 b817 	b.w	8005100 <_kill_r>
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d00a      	beq.n	80050ec <_raise_r+0x4c>
 80050d6:	1c59      	adds	r1, r3, #1
 80050d8:	d103      	bne.n	80050e2 <_raise_r+0x42>
 80050da:	2316      	movs	r3, #22
 80050dc:	6003      	str	r3, [r0, #0]
 80050de:	2001      	movs	r0, #1
 80050e0:	e7e7      	b.n	80050b2 <_raise_r+0x12>
 80050e2:	2400      	movs	r4, #0
 80050e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80050e8:	4628      	mov	r0, r5
 80050ea:	4798      	blx	r3
 80050ec:	2000      	movs	r0, #0
 80050ee:	e7e0      	b.n	80050b2 <_raise_r+0x12>

080050f0 <raise>:
 80050f0:	4b02      	ldr	r3, [pc, #8]	; (80050fc <raise+0xc>)
 80050f2:	4601      	mov	r1, r0
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	f7ff bfd3 	b.w	80050a0 <_raise_r>
 80050fa:	bf00      	nop
 80050fc:	20000010 	.word	0x20000010

08005100 <_kill_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d07      	ldr	r5, [pc, #28]	; (8005120 <_kill_r+0x20>)
 8005104:	2300      	movs	r3, #0
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	f7fd f887 	bl	8002220 <_kill>
 8005112:	1c43      	adds	r3, r0, #1
 8005114:	d102      	bne.n	800511c <_kill_r+0x1c>
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	b103      	cbz	r3, 800511c <_kill_r+0x1c>
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	bd38      	pop	{r3, r4, r5, pc}
 800511e:	bf00      	nop
 8005120:	200009c8 	.word	0x200009c8

08005124 <_getpid_r>:
 8005124:	f7fd b874 	b.w	8002210 <_getpid>

08005128 <__sread>:
 8005128:	b510      	push	{r4, lr}
 800512a:	460c      	mov	r4, r1
 800512c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005130:	f000 f894 	bl	800525c <_read_r>
 8005134:	2800      	cmp	r0, #0
 8005136:	bfab      	itete	ge
 8005138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800513a:	89a3      	ldrhlt	r3, [r4, #12]
 800513c:	181b      	addge	r3, r3, r0
 800513e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005142:	bfac      	ite	ge
 8005144:	6563      	strge	r3, [r4, #84]	; 0x54
 8005146:	81a3      	strhlt	r3, [r4, #12]
 8005148:	bd10      	pop	{r4, pc}

0800514a <__swrite>:
 800514a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800514e:	461f      	mov	r7, r3
 8005150:	898b      	ldrh	r3, [r1, #12]
 8005152:	05db      	lsls	r3, r3, #23
 8005154:	4605      	mov	r5, r0
 8005156:	460c      	mov	r4, r1
 8005158:	4616      	mov	r6, r2
 800515a:	d505      	bpl.n	8005168 <__swrite+0x1e>
 800515c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005160:	2302      	movs	r3, #2
 8005162:	2200      	movs	r2, #0
 8005164:	f000 f868 	bl	8005238 <_lseek_r>
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800516e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005172:	81a3      	strh	r3, [r4, #12]
 8005174:	4632      	mov	r2, r6
 8005176:	463b      	mov	r3, r7
 8005178:	4628      	mov	r0, r5
 800517a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800517e:	f000 b817 	b.w	80051b0 <_write_r>

08005182 <__sseek>:
 8005182:	b510      	push	{r4, lr}
 8005184:	460c      	mov	r4, r1
 8005186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518a:	f000 f855 	bl	8005238 <_lseek_r>
 800518e:	1c43      	adds	r3, r0, #1
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	bf15      	itete	ne
 8005194:	6560      	strne	r0, [r4, #84]	; 0x54
 8005196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800519a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800519e:	81a3      	strheq	r3, [r4, #12]
 80051a0:	bf18      	it	ne
 80051a2:	81a3      	strhne	r3, [r4, #12]
 80051a4:	bd10      	pop	{r4, pc}

080051a6 <__sclose>:
 80051a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051aa:	f000 b813 	b.w	80051d4 <_close_r>
	...

080051b0 <_write_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d07      	ldr	r5, [pc, #28]	; (80051d0 <_write_r+0x20>)
 80051b4:	4604      	mov	r4, r0
 80051b6:	4608      	mov	r0, r1
 80051b8:	4611      	mov	r1, r2
 80051ba:	2200      	movs	r2, #0
 80051bc:	602a      	str	r2, [r5, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	f7fd f865 	bl	800228e <_write>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d102      	bne.n	80051ce <_write_r+0x1e>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	b103      	cbz	r3, 80051ce <_write_r+0x1e>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	200009c8 	.word	0x200009c8

080051d4 <_close_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4d06      	ldr	r5, [pc, #24]	; (80051f0 <_close_r+0x1c>)
 80051d8:	2300      	movs	r3, #0
 80051da:	4604      	mov	r4, r0
 80051dc:	4608      	mov	r0, r1
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	f7fd f871 	bl	80022c6 <_close>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_close_r+0x1a>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_close_r+0x1a>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	200009c8 	.word	0x200009c8

080051f4 <_fstat_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d07      	ldr	r5, [pc, #28]	; (8005214 <_fstat_r+0x20>)
 80051f8:	2300      	movs	r3, #0
 80051fa:	4604      	mov	r4, r0
 80051fc:	4608      	mov	r0, r1
 80051fe:	4611      	mov	r1, r2
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	f7fd f86c 	bl	80022de <_fstat>
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	d102      	bne.n	8005210 <_fstat_r+0x1c>
 800520a:	682b      	ldr	r3, [r5, #0]
 800520c:	b103      	cbz	r3, 8005210 <_fstat_r+0x1c>
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	bd38      	pop	{r3, r4, r5, pc}
 8005212:	bf00      	nop
 8005214:	200009c8 	.word	0x200009c8

08005218 <_isatty_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d06      	ldr	r5, [pc, #24]	; (8005234 <_isatty_r+0x1c>)
 800521c:	2300      	movs	r3, #0
 800521e:	4604      	mov	r4, r0
 8005220:	4608      	mov	r0, r1
 8005222:	602b      	str	r3, [r5, #0]
 8005224:	f7fd f86b 	bl	80022fe <_isatty>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_isatty_r+0x1a>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	b103      	cbz	r3, 8005232 <_isatty_r+0x1a>
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	200009c8 	.word	0x200009c8

08005238 <_lseek_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4d07      	ldr	r5, [pc, #28]	; (8005258 <_lseek_r+0x20>)
 800523c:	4604      	mov	r4, r0
 800523e:	4608      	mov	r0, r1
 8005240:	4611      	mov	r1, r2
 8005242:	2200      	movs	r2, #0
 8005244:	602a      	str	r2, [r5, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	f7fd f864 	bl	8002314 <_lseek>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_lseek_r+0x1e>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_lseek_r+0x1e>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	200009c8 	.word	0x200009c8

0800525c <_read_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4d07      	ldr	r5, [pc, #28]	; (800527c <_read_r+0x20>)
 8005260:	4604      	mov	r4, r0
 8005262:	4608      	mov	r0, r1
 8005264:	4611      	mov	r1, r2
 8005266:	2200      	movs	r2, #0
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f7fc fff2 	bl	8002254 <_read>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_read_r+0x1e>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_read_r+0x1e>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	200009c8 	.word	0x200009c8

08005280 <_init>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr

0800528c <_fini>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr
